{
  "data": [
    {
      "sample_id": 1,
      "input": "Please list all the superpowers of 3-D Man.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "3-D Man"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Agility",
        "Super Strength",
        "Stamina",
        "Super Speed"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.power_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T3": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "3-D Man"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.power_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T3": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 2,
      "input": "How many superheroes have the super power of \"Super Strength\"?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Super Strength"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_power_hero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 358,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.power_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T2": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Super Strength"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_power_hero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.power_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T2": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 3,
      "input": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Super Strength"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_greater_than",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_height_cm",
            "value": 200
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 56,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.power_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T3": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Super Strength"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_greater_than",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_height_cm",
            "value": 200
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.power_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T3": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 4,
      "input": "How many superheroes have blue eyes?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Blue"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 234,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.eye_colour_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Blue"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.eye_colour_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 5,
      "input": "What is the colour of Apocalypse's skin?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Apocalypse"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "Grey",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.skin_colour_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Apocalypse"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.skin_colour_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 6,
      "input": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Agility"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "colour_colour",
            "value": "Blue"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 83,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.power_id",
                "T3.id",
                "INNER"
              ],
              [
                "T1.eye_colour_id",
                "T4.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T3": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              },
              "T4": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Agility"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "colour_colour",
            "value": "Blue"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.power_id",
              "T3.id",
              "INNER"
            ],
            [
              "T1.eye_colour_id",
              "T4.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T3": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            },
            "T4": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 7,
      "input": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Blue"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "colour_1_colour",
            "value": "Blond"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Adam Monroe",
        "Adam Strange",
        "Agent 13",
        "Alan Scott",
        "Angel",
        "Animal Man",
        "Ant-Man",
        "Ant-Man II",
        "Anti-Venom",
        "Aquababy",
        "Aquaman",
        "Arachne",
        "Archangel",
        "Batgirl VI",
        "Binary",
        "Black Canary",
        "Black Canary II",
        "Black Widow II",
        "Boom-Boom",
        "Booster Gold",
        "Box III",
        "Bullseye",
        "Cannonball",
        "Captain America",
        "Captain Britain",
        "Captain Mar-vell",
        "Captain Marvel",
        "Cat",
        "Claire Bennet",
        "Cypher",
        "Dagger",
        "Dash",
        "Dazzler",
        "Doctor Fate",
        "Elle Bishop",
        "Emma Frost",
        "Enchantress",
        "Flash II",
        "Franklin Richards",
        "Genesis",
        "Green Lantern",
        "Harley Quinn",
        "Havok",
        "Hawkeye",
        "Human Torch",
        "Husk",
        "Invisible Woman",
        "Iron Fist",
        "James Bond",
        "James Bond (Craig)",
        "Jennifer Kale",
        "John Constantine",
        "Kick-Ass",
        "Killer Frost",
        "Longshot",
        "Luke Skywalker",
        "Magog",
        "Meltdown",
        "Mister Zsasz",
        "Mockingbird",
        "Moonstone",
        "Mr Immortal",
        "Mr Incredible",
        "Namora",
        "Namorita",
        "Niki Sanders",
        "Ozymandias",
        "Penance II",
        "Power Girl",
        "Pyro",
        "Question",
        "Rip Hunter",
        "Ronin",
        "Saturn Girl",
        "Scarlet Spider",
        "Sentry",
        "Spider-Gwen",
        "Star-Lord",
        "Stargirl",
        "Supergirl",
        "Thor",
        "Thor Girl",
        "Thunderstrike",
        "Trickster",
        "Ultragirl",
        "Valkyrie",
        "Warbird",
        "White Queen",
        "Wonder Girl",
        "Yellowjacket"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.eye_colour_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.hair_colour_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              },
              "T3": {
                "original_table_name": "colour",
                "modified_table_name": "colour_1"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Blue"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "colour_1_colour",
            "value": "Blond"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.eye_colour_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.hair_colour_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            },
            "T3": {
              "original_table_name": "colour",
              "modified_table_name": "colour_1"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_1_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_1_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data colour_1_id: the unique identifier of the color",
          "name": "get_colour_1_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        },
        {
          "key_name": "colour_1_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_1_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 8,
      "input": "How many superheroes are published by Marvel Comics?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "Marvel Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 387,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.publisher_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "Marvel Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.publisher_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_publisher_name: the name of the publisher",
          "name": "get_publisher_publisher_names",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 9,
      "input": "Who is the publisher of Sauron?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Sauron"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_publisher_publisher_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "J. R. R. Tolkien",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.publisher_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Sauron"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_publisher_publisher_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.publisher_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_publisher_name: the name of the publisher",
          "name": "get_publisher_publisher_names",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 10,
      "input": "What is the average height of the superheroes from Marvel Comics?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "Marvel Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_mean",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_height_cm",
            "distinct": false
          },
          "label": "MEAN"
        }
      ],
      "gold_answer": 347.9590163934426,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.publisher_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "Marvel Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_mean",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_height_cm",
            "distinct": false
          },
          "label": "MEAN"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.publisher_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_publisher_name: the name of the publisher",
          "name": "get_publisher_publisher_names",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 11,
      "input": "How many superheroes did DC Comics publish?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "DC Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 224,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.publisher_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "DC Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.publisher_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_publisher_name: the name of the publisher",
          "name": "get_publisher_publisher_names",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 12,
      "input": "Which publisher published the slowest superhero?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_attribute_name",
            "value": "Speed"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_ascending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_publisher_publisher_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "gold_answer": "Marvel Comics",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.publisher_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.id",
                "T3.hero_id",
                "INNER"
              ],
              [
                "T3.attribute_id",
                "T4.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              },
              "T3": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              },
              "T4": {
                "original_table_name": "attribute",
                "modified_table_name": "attribute"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_attribute_name",
            "value": "Speed"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_ascending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_publisher_publisher_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.publisher_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.id",
              "T3.hero_id",
              "INNER"
            ],
            [
              "T3.attribute_id",
              "T4.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            },
            "T3": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            },
            "T4": {
              "original_table_name": "attribute",
              "modified_table_name": "attribute"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_id: the unique identifier of the attribute",
          "name": "get_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_attribute_name: the attribute",
          "name": "get_attribute_attribute_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_publisher_name: the name of the publisher",
          "name": "get_publisher_publisher_names",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        },
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        },
        {
          "key_name": "attribute_id",
          "description": "the unique identifier of the attribute",
          "dtype": "integer"
        },
        {
          "key_name": "attribute_attribute_name",
          "description": "the attribute",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 13,
      "input": "How many gold-eyed superheroes did Marvel Comics publish?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "Marvel Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "colour_colour",
            "value": "Gold"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 2,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.publisher_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.eye_colour_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              },
              "T3": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "Marvel Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "colour_colour",
            "value": "Gold"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.publisher_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.eye_colour_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            },
            "T3": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_publisher_name: the name of the publisher",
          "name": "get_publisher_publisher_names",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 14,
      "input": "What is the publisher's name of Blue Beetle II?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Blue Beetle II"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_publisher_publisher_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "DC Comics",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.publisher_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Blue Beetle II"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_publisher_publisher_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.publisher_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_publisher_name: the name of the publisher",
          "name": "get_publisher_publisher_names",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 15,
      "input": "How many superheroes with blonde hair are there?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Blond"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 105,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.hair_colour_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Blond"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.hair_colour_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 16,
      "input": "Who is the dumbest superhero?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_attribute_name",
            "value": "Intelligence"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_ascending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "gold_answer": "Ammo",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.attribute_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              },
              "T3": {
                "original_table_name": "attribute",
                "modified_table_name": "attribute"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_attribute_name",
            "value": "Intelligence"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_ascending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.attribute_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            },
            "T3": {
              "original_table_name": "attribute",
              "modified_table_name": "attribute"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_id: the unique identifier of the attribute",
          "name": "get_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_attribute_name: the attribute",
          "name": "get_attribute_attribute_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        },
        {
          "key_name": "attribute_id",
          "description": "the unique identifier of the attribute",
          "dtype": "integer"
        },
        {
          "key_name": "attribute_attribute_name",
          "description": "the attribute",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 17,
      "input": "What is Copycat's race?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Copycat"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "Mutant",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.race_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "race",
                "modified_table_name": "race"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Copycat"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.race_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "race",
              "modified_table_name": "race"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 18,
      "input": "What are the names of the superheroes with the power of death touch?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Death Touch"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Black Flash",
        "Blackwulf",
        "Hela",
        "Living Tribunal",
        "One-Above-All",
        "Poison Ivy",
        "Spectre"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.power_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T3": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Death Touch"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.power_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T3": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 19,
      "input": "How many female superheroes have a strength value of 100?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_attribute_name",
            "value": "Strength"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value",
            "value": 100
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "gender_gender",
            "value": "Female"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 12,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.attribute_id",
                "T3.id",
                "INNER"
              ],
              [
                "T1.gender_id",
                "T4.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              },
              "T3": {
                "original_table_name": "attribute",
                "modified_table_name": "attribute"
              },
              "T4": {
                "original_table_name": "gender",
                "modified_table_name": "gender"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_attribute_name",
            "value": "Strength"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value",
            "value": 100
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "gender_gender",
            "value": "Female"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.attribute_id",
              "T3.id",
              "INNER"
            ],
            [
              "T1.gender_id",
              "T4.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            },
            "T3": {
              "original_table_name": "attribute",
              "modified_table_name": "attribute"
            },
            "T4": {
              "original_table_name": "gender",
              "modified_table_name": "gender"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_id: the unique identifier of the attribute",
          "name": "get_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data gender_id: the unique identifier of the gender",
          "name": "get_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_attribute_name: the attribute",
          "name": "get_attribute_attribute_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Lookup data gender_gender: the gender of the superhero",
          "name": "get_gender_genders",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        },
        {
          "key_name": "attribute_id",
          "description": "the unique identifier of the attribute",
          "dtype": "integer"
        },
        {
          "key_name": "attribute_attribute_name",
          "description": "the attribute",
          "dtype": "string"
        },
        {
          "key_name": "gender_id",
          "description": "the unique identifier of the gender",
          "dtype": "integer"
        },
        {
          "key_name": "gender_gender",
          "description": "the gender of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 20,
      "input": "How many vampire superheroes are there?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "race_race",
            "value": "Vampire"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_superhero_name",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 2,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.race_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "race",
                "modified_table_name": "race"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "race_race",
            "value": "Vampire"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_superhero_name",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.race_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "race",
              "modified_table_name": "race"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 21,
      "input": "Give the publisher ID of Star Trek.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_name",
            "value": "Star Trek"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_ids",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": 20,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [],
            "alias_to_table_dict": {
              "": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_name",
            "value": "Star Trek"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_ids",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [],
          "alias_to_table_dict": {
            "": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data id: the unique identifier of the publisher",
          "name": "get_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_name: the name of the publisher",
          "name": "get_publisher_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 22,
      "input": "Calculate the average attribute value of all superheroes.",
      "output": [
        {
          "name": "compute_data_mean",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_value",
            "distinct": false
          },
          "label": "MEAN"
        }
      ],
      "gold_answer": 52.426431246655966,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [],
            "alias_to_table_dict": {
              "": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "compute_data_mean",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_value",
            "distinct": false
          },
          "label": "MEAN"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [],
          "alias_to_table_dict": {
            "": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data attribute_id: the unique identifier of the attribute",
          "name": "get_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data attribute_value: the attribute value",
          "name": "get_attribute_values",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 23,
      "input": "What is the eye colour of superhero with superhero ID 75?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_id",
            "value": 75
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "Blue",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.eye_colour_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_id",
            "value": 75
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.eye_colour_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 24,
      "input": "Provide the superpowers of the superhero called Deathlok.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Deathlok"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Agility",
        "Durability",
        "Intelligence",
        "Super Strength",
        "Stamina",
        "Super Speed",
        "Enhanced Memory",
        "Reflexes",
        "Vision - Telescopic",
        "Vision - Microscopic",
        "Vision - Infrared"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.power_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T3": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Deathlok"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.power_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T3": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 25,
      "input": "What is the average weight of all female superheroes?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "gender_gender",
            "value": "Female"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_mean",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_weight_kg",
            "distinct": false
          },
          "label": "MEAN"
        }
      ],
      "gold_answer": 60.77956989247312,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.gender_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "gender",
                "modified_table_name": "gender"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "gender_gender",
            "value": "Female"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_mean",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_weight_kg",
            "distinct": false
          },
          "label": "MEAN"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.gender_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "gender",
              "modified_table_name": "gender"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data gender_id: the unique identifier of the gender",
          "name": "get_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Lookup data gender_gender: the gender of the superhero",
          "name": "get_gender_genders",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "gender_id",
          "description": "the unique identifier of the gender",
          "dtype": "integer"
        },
        {
          "key_name": "gender_gender",
          "description": "the gender of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 26,
      "input": "Give the name of the alien superheroes.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "race_race",
            "value": "Alien"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Ardina",
        "Blackwulf",
        "Century",
        "Doomsday",
        "Evilhawk",
        "Hawkman",
        "Indigo",
        "Silver Surfer"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.race_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "race",
                "modified_table_name": "race"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "race_race",
            "value": "Alien"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.race_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "race",
              "modified_table_name": "race"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 27,
      "input": "What is the superpower of hero ID 56?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "hero_power_hero_id",
            "value": 56
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Flight",
        "Super Strength",
        "Size Changing",
        "Density Control",
        "Gliding"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.power_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T2": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "hero_power_hero_id",
            "value": 56
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.power_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T2": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 28,
      "input": "List down at least five full name of Demi-God superheroes.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "race_race",
            "value": "Demi-God"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_full_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Heracles",
        "-",
        "Cassandra Elizabeth Sandsmark"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.race_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "race",
                "modified_table_name": "race"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "race_race",
            "value": "Demi-God"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_full_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.race_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "race",
              "modified_table_name": "race"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 29,
      "input": "How many bad superheroes are there?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Bad"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 212,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.alignment_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "alignment",
                "modified_table_name": "alignment"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Bad"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.alignment_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "alignment",
              "modified_table_name": "alignment"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data alignment_id: the unique identifier of the alignment",
          "name": "get_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data alignment_alignment: the alignment of the superhero",
          "name": "get_alignment_alignments",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_id",
          "description": "the unique identifier of the alignment",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_alignment",
          "description": "the alignment of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 30,
      "input": "Identify the race of the superhero who weighed 169 kg.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_weight_kg",
            "value": 169
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "Xenomorph XX121",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.race_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "race",
                "modified_table_name": "race"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_weight_kg",
            "value": 169
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.race_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "race",
              "modified_table_name": "race"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 31,
      "input": "Provide the hair colour of the human superhero who is 185 cm tall.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_height_cm",
            "value": 185
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "race_race",
            "value": "Human"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "select_unique_values",
          "arguments": {
            "data": "$SELECT_COL_0$"
          },
          "label": "DISTINCT_COL_0"
        }
      ],
      "gold_answer": [
        "Blond",
        "Brown",
        "Black",
        "Brown/White",
        "No Colour"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.race_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.hair_colour_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "race",
                "modified_table_name": "race"
              },
              "T3": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_height_cm",
            "value": 185
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "race_race",
            "value": "Human"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "select_unique_values",
          "arguments": {
            "data": "$SELECT_COL_0$"
          },
          "label": "DISTINCT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.race_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.hair_colour_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "race",
              "modified_table_name": "race"
            },
            "T3": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 32,
      "input": "What is the eye clolour of the heaviest superhero?",
      "output": [
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_weight_kg"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "gold_answer": "No Colour",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.eye_colour_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_weight_kg"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.eye_colour_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 33,
      "input": "Indicate the attribute value of superhero Abomination.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Abomination"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_hero_attribute_attribute_values",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        85,
        80,
        55,
        55,
        55,
        55
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Abomination"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_hero_attribute_attribute_values",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 34,
      "input": "What are the superpowers of heroes with ID 1?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "hero_power_hero_id",
            "value": 1
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "select_unique_values",
          "arguments": {
            "data": "$SELECT_COL_0$"
          },
          "label": "DISTINCT_COL_0"
        }
      ],
      "gold_answer": [
        "Agility",
        "Super Strength",
        "Stamina",
        "Super Speed"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.power_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T2": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "hero_power_hero_id",
            "value": 1
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "select_unique_values",
          "arguments": {
            "data": "$SELECT_COL_0$"
          },
          "label": "DISTINCT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.power_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T2": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 35,
      "input": "How many heroes have stealth power?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Stealth"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_power_hero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 127,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.power_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T2": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Stealth"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_power_hero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.power_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T2": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 36,
      "input": "What is the hero's full name with the highest attribute in strength?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_attribute_name",
            "value": "Strength"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_full_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "gold_answer": "Richard Milhouse Jones",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.attribute_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              },
              "T3": {
                "original_table_name": "attribute",
                "modified_table_name": "attribute"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_attribute_name",
            "value": "Strength"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_full_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.attribute_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            },
            "T3": {
              "original_table_name": "attribute",
              "modified_table_name": "attribute"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_id: the unique identifier of the attribute",
          "name": "get_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_attribute_name: the attribute",
          "name": "get_attribute_attribute_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        },
        {
          "key_name": "attribute_id",
          "description": "the unique identifier of the attribute",
          "dtype": "integer"
        },
        {
          "key_name": "attribute_attribute_name",
          "description": "the attribute",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 37,
      "input": "How many superheroes were published by Dark Horse Comics?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "Dark Horse Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 19,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.publisher_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "Dark Horse Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.publisher_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_publisher_name: the name of the publisher",
          "name": "get_publisher_publisher_names",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 38,
      "input": "What is the eyes colour of Abraham Sapien?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_full_name",
            "value": "Abraham Sapien"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "Blue",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.eye_colour_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_full_name",
            "value": "Abraham Sapien"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.eye_colour_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 39,
      "input": "List the name of superheroes with flight power.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Flight"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Abraxas",
        "Adam Strange",
        "Air-Walker",
        "Alan Scott",
        "Amazo",
        "Angel",
        "Angel",
        "Angel Salvadore",
        "Annihilus",
        "Anti-Monitor",
        "Apocalypse",
        "Archangel",
        "Ardina",
        "Astro Boy",
        "Atom II",
        "Aurora",
        "Aztar",
        "Bananaman",
        "Banshee",
        "Beak",
        "Beast Boy",
        "Beyonder",
        "Big Barda",
        "Binary",
        "Bird-Brain",
        "Bird-Man",
        "Bird-Man II",
        "Birdman",
        "Bizarro",
        "Black Adam",
        "Black Bolt",
        "Black Flash",
        "Black Lightning",
        "Blackwing",
        "Bloodhawk",
        "Blue Beetle",
        "Blue Beetle III",
        "Boba Fett",
        "Booster Gold",
        "Brainiac",
        "Bumblebee",
        "Bumbleboy",
        "Cable",
        "Cannonball",
        "Captain Atom",
        "Captain Britain",
        "Captain Hindsight",
        "Captain Marvel",
        "Captain Marvel",
        "Captain Midnight",
        "Captain Planet",
        "Captain Universe",
        "Crimson Crusader",
        "Crimson Dynamo",
        "Cyborg",
        "Cyborg Superman",
        "Darkhawk",
        "Darkseid",
        "Darkstar",
        "Deadman",
        "Doctor Doom",
        "Doctor Doom II",
        "Doctor Fate",
        "Doctor Strange",
        "Donna Troy",
        "Dr Manhattan",
        "Enchantress",
        "Energy",
        "Evilhawk",
        "Exodus",
        "Falcon",
        "Fallen One II",
        "Faora",
        "Fighting Spirit",
        "Fin Fang Foom",
        "Firebird",
        "Firelord",
        "Firestar",
        "Firestorm",
        "Flash",
        "Flash II",
        "Flash III",
        "Franklin Richards",
        "Galactus",
        "General Zod",
        "Gladiator",
        "Goku",
        "Gravity",
        "Guy Gardner",
        "Hal Jordan",
        "Hancock",
        "Havok",
        "Hawk",
        "Hawkgirl",
        "Hellstorm",
        "Human Torch",
        "Hybrid",
        "Hyperion",
        "Impulse",
        "Indigo",
        "Ink",
        "Iron Man",
        "Iron Monger",
        "Isis",
        "Jack of Hearts",
        "Jack-Jack",
        "Jessica Cruz",
        "Jessica Jones",
        "John Stewart",
        "Justice",
        "Karate Kid",
        "Kevin 11",
        "Krypto",
        "Kyle Rayner",
        "Legion",
        "Lex Luthor",
        "Light Lass",
        "Living Brain",
        "Living Tribunal",
        "Loki",
        "Mach-IV",
        "Machine Man",
        "Magneto",
        "Magus",
        "Man-Bat",
        "Mantis",
        "Martian Manhunter",
        "Marvel Girl",
        "Match",
        "Maxima",
        "Metron",
        "Mimic",
        "Miss Martian",
        "Mister Mxyzptlk",
        "Mister Sinister",
        "MODOK",
        "Monarch",
        "Moonstone",
        "Namor",
        "Namora",
        "Namorita",
        "Nathan Petrelli",
        "Nova",
        "One-Above-All",
        "Onslaught",
        "Osiris",
        "Parademon",
        "Polaris",
        "Power Girl",
        "Raven",
        "Ray",
        "Red Tornado",
        "Redeemer III",
        "Scarlet Witch",
        "Sentry",
        "Shadow Lass",
        "Shriek",
        "Silver Surfer",
        "Silverclaw",
        "Simon Baz",
        "Sinestro",
        "Siryn",
        "Snowbird",
        "Songbird",
        "Space Ghost",
        "Spawn",
        "Spectre",
        "Spider-Woman",
        "Spider-Woman III",
        "Spider-Woman IV",
        "Stardust",
        "Starfire",
        "Static",
        "Steel",
        "Storm",
        "Sunspot",
        "Superboy",
        "Superboy-Prime",
        "Supergirl",
        "Superman",
        "Swamp Thing",
        "Swarm",
        "Tempest",
        "Thanos",
        "Thor",
        "Thunderbird III",
        "Titan",
        "Trickster",
        "Trigon",
        "Triplicate Girl",
        "Ultragirl",
        "Ultron",
        "Vegeta",
        "Vindicator",
        "Vision",
        "Vixen",
        "Vulture",
        "War Machine",
        "Warlock",
        "Warp",
        "Wasp",
        "Watcher",
        "Wildfire",
        "Wonder Girl",
        "Wonder Man",
        "Wonder Woman",
        "X-Man",
        "Yellowjacket II"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.power_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T3": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Flight"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.power_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T3": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 40,
      "input": "Which group does superhero A-Bomb belong to?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "A-Bomb"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "Human",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.race_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "race",
                "modified_table_name": "race"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "A-Bomb"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.race_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "race",
              "modified_table_name": "race"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 41,
      "input": "Provide the hero name and race of Charles Chandler.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_full_name",
            "value": "Charles Chandler"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_1"
        }
      ],
      "gold_answer": [
        "3-D Man",
        "-"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.race_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "race",
                "modified_table_name": "race"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_full_name",
            "value": "Charles Chandler"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_1"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.race_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "race",
              "modified_table_name": "race"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 42,
      "input": "What is the gender of Agent 13 hero?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Agent 13"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_gender_genders",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "Female",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.gender_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "gender",
                "modified_table_name": "gender"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Agent 13"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_gender_genders",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.gender_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "gender",
              "modified_table_name": "gender"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data gender_id: the unique identifier of the gender",
          "name": "get_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Lookup data gender_gender: the gender of the superhero",
          "name": "get_gender_genders",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "gender_id",
          "description": "the unique identifier of the gender",
          "dtype": "integer"
        },
        {
          "key_name": "gender_gender",
          "description": "the gender of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 43,
      "input": "Provide superheroes' names who have the adaptation power.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Adaptation"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Alex Mercer",
        "Doomsday",
        "Legion",
        "Man of Miracles",
        "Vegeta"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.power_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T3": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Adaptation"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.power_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T3": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 44,
      "input": "How many powers does Amazo hero have?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Amazo"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_power_power_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 44,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.hero_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T2": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Amazo"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_power_power_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.hero_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T2": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 45,
      "input": "List the powers of Hunter Zolomon.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_full_name",
            "value": "Hunter Zolomon"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Super Speed",
        "Intangibility",
        "Time Travel",
        "Time Manipulation"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.power_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T3": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_full_name",
            "value": "Hunter Zolomon"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.power_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T3": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 46,
      "input": "Provide the heights of the heroes whose eye colours are amber.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Amber"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_height_cms",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        178,
        198,
        175
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.eye_colour_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Amber"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_height_cms",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.eye_colour_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 47,
      "input": "Provide the eye colours of the heroes whose skin colours are gold.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_1_colour",
            "value": "Gold"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "White",
        "Blue"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.eye_colour_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.skin_colour_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              },
              "T3": {
                "original_table_name": "colour",
                "modified_table_name": "colour_1"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_1_colour",
            "value": "Gold"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.eye_colour_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.skin_colour_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            },
            "T3": {
              "original_table_name": "colour",
              "modified_table_name": "colour_1"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_1_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_1_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data colour_1_id: the unique identifier of the color",
          "name": "get_colour_1_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        },
        {
          "key_name": "colour_1_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_1_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 48,
      "input": "Provide the full names of vampire heroes.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "race_race",
            "value": "Vampire"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_full_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Liam",
        "Eric Brooks"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.race_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "race",
                "modified_table_name": "race"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "race_race",
            "value": "Vampire"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_full_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.race_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "race",
              "modified_table_name": "race"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 49,
      "input": "Describe the names of neutral alignment superheroes.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Neutral"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Ares",
        "Bizarro",
        "Black Flash",
        "Brundlefly",
        "Captain Cold",
        "Copycat",
        "Deadpool",
        "Deathstroke",
        "Etrigan",
        "Galactus",
        "Gladiator",
        "Indigo",
        "Juggernaut",
        "Living Tribunal",
        "Lobo",
        "Lucifer Morningstar",
        "Man-Bat",
        "One-Above-All",
        "Phantom Stranger",
        "Raven",
        "Red Hood",
        "Red Hulk",
        "Robin VI",
        "Sandman",
        "Sinestro",
        "The Comedian",
        "The Presence",
        "Toad"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.alignment_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "alignment",
                "modified_table_name": "alignment"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Neutral"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.alignment_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "alignment",
              "modified_table_name": "alignment"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data alignment_id: the unique identifier of the alignment",
          "name": "get_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data alignment_alignment: the alignment of the superhero",
          "name": "get_alignment_alignments",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_id",
          "description": "the unique identifier of the alignment",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_alignment",
          "description": "the alignment of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 50,
      "input": "What are the race and alignment of Cameron Hicks?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Cameron Hicks"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "get_alignment_alignments",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_1"
        }
      ],
      "gold_answer": [
        "Alpha",
        "Good"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.race_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.alignment_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "race",
                "modified_table_name": "race"
              },
              "T3": {
                "original_table_name": "alignment",
                "modified_table_name": "alignment"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Cameron Hicks"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "get_alignment_alignments",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_1"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.race_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.alignment_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "race",
              "modified_table_name": "race"
            },
            "T3": {
              "original_table_name": "alignment",
              "modified_table_name": "alignment"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data alignment_id: the unique identifier of the alignment",
          "name": "get_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data alignment_alignment: the alignment of the superhero",
          "name": "get_alignment_alignments",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "alignment_id",
          "description": "the unique identifier of the alignment",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_alignment",
          "description": "the alignment of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 51,
      "input": "What is Abomination's superpower?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Abomination"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Accelerated Healing",
        "Intelligence",
        "Super Strength",
        "Stamina",
        "Super Speed",
        "Invulnerability",
        "Animation",
        "Super Breath"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.power_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T3": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Abomination"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.power_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T3": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 52,
      "input": "Which hero was the fastest?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_attribute_name",
            "value": "Speed"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "gold_answer": "Air-Walker",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.attribute_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              },
              "T3": {
                "original_table_name": "attribute",
                "modified_table_name": "attribute"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_attribute_name",
            "value": "Speed"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.attribute_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            },
            "T3": {
              "original_table_name": "attribute",
              "modified_table_name": "attribute"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_id: the unique identifier of the attribute",
          "name": "get_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_attribute_name: the attribute",
          "name": "get_attribute_attribute_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        },
        {
          "key_name": "attribute_id",
          "description": "the unique identifier of the attribute",
          "dtype": "integer"
        },
        {
          "key_name": "attribute_attribute_name",
          "description": "the attribute",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 53,
      "input": "How many superheroes have a neutral alignment?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Neutral"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 28,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.alignment_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "alignment",
                "modified_table_name": "alignment"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Neutral"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.alignment_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "alignment",
              "modified_table_name": "alignment"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data alignment_id: the unique identifier of the alignment",
          "name": "get_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data alignment_alignment: the alignment of the superhero",
          "name": "get_alignment_alignments",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_id",
          "description": "the unique identifier of the alignment",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_alignment",
          "description": "the alignment of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 54,
      "input": "State all of 3-D Man's attributes along with their values.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "3-D Man"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_attribute_attribute_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "get_hero_attribute_attribute_values",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_1"
        }
      ],
      "gold_answer": [
        [
          "Intelligence",
          "Strength",
          "Speed",
          "Durability",
          "Power",
          "Combat"
        ],
        [
          80,
          35,
          45,
          45,
          45,
          45
        ]
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.attribute_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              },
              "T3": {
                "original_table_name": "attribute",
                "modified_table_name": "attribute"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "3-D Man"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_attribute_attribute_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "get_hero_attribute_attribute_values",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_1"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.attribute_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            },
            "T3": {
              "original_table_name": "attribute",
              "modified_table_name": "attribute"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_id: the unique identifier of the attribute",
          "name": "get_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_attribute_name: the attribute",
          "name": "get_attribute_attribute_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        },
        {
          "key_name": "attribute_id",
          "description": "the unique identifier of the attribute",
          "dtype": "integer"
        },
        {
          "key_name": "attribute_attribute_name",
          "description": "the attribute",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 55,
      "input": "Which superheroes have blue eyes with brown hair?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Blue"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "colour_1_colour",
            "value": "Brown"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Atlas",
        "Atlas",
        "Big Man",
        "Bloodaxe",
        "Blue Beetle",
        "Blue Beetle II",
        "Captain Epic",
        "Chewbacca",
        "Fabian Cortez",
        "Gravity",
        "Hawkman",
        "Hercules",
        "Jack-Jack",
        "Mister Knife",
        "Molecule Man",
        "Multiple Man",
        "Rick Flag",
        "Scarecrow",
        "Scarlet Witch",
        "Spider-Girl",
        "Toxin",
        "X-Man"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.eye_colour_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.hair_colour_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              },
              "T3": {
                "original_table_name": "colour",
                "modified_table_name": "colour_1"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Blue"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "colour_1_colour",
            "value": "Brown"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.eye_colour_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.hair_colour_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            },
            "T3": {
              "original_table_name": "colour",
              "modified_table_name": "colour_1"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_1_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_1_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data colour_1_id: the unique identifier of the color",
          "name": "get_colour_1_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        },
        {
          "key_name": "colour_1_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_1_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 56,
      "input": "How many superheroes didn't have any publisher?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_id",
            "value": 1
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 17,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.publisher_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_id",
            "value": 1
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.publisher_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_publisher_name: the name of the publisher",
          "name": "get_publisher_publisher_names",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 57,
      "input": "Who is the tallest superhero?",
      "output": [
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "height_cm"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "gold_answer": "Surtur",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [],
            "alias_to_table_dict": {
              "": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "height_cm"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [],
          "alias_to_table_dict": {
            "": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data alignment_id: the unique identifier of the alignment",
          "name": "get_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_name: the name of the superhero",
          "name": "get_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data skin_colour_id: the id of the superhero's skin color",
          "name": "get_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data full_name: the full name of the superhero",
          "name": "get_full_names",
          "arguments": {}
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data id: the unique identifier of the publisher",
          "name": "get_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data weight_kg: the weight of the superhero",
          "name": "get_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Lookup data gender_id: the unique identifier of the gender",
          "name": "get_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data height_cm: the height of the superhero",
          "name": "get_height_cms",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hair_colour_id: the id of the superhero's hair color",
          "name": "get_hair_colour_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data eye_colour_id: the id of the superhero's eye color",
          "name": "get_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 58,
      "input": "What is the power ID of cryokinesis?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "power_name",
            "value": "Cryokinesis"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_ids",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": 19,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [],
            "alias_to_table_dict": {
              "": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "power_name",
            "value": "Cryokinesis"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_ids",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [],
          "alias_to_table_dict": {
            "": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data power_name: the superpower name",
          "name": "get_power_names",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data id: the unique identifier of the publisher",
          "name": "get_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 59,
      "input": "Provide the name of superhero with superhero ID 294.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "id",
            "value": 294
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "Gog",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [],
            "alias_to_table_dict": {
              "": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "id",
            "value": 294
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [],
          "alias_to_table_dict": {
            "": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data alignment_id: the unique identifier of the alignment",
          "name": "get_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_name: the name of the superhero",
          "name": "get_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data skin_colour_id: the id of the superhero's skin color",
          "name": "get_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data full_name: the full name of the superhero",
          "name": "get_full_names",
          "arguments": {}
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data id: the unique identifier of the publisher",
          "name": "get_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data weight_kg: the weight of the superhero",
          "name": "get_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Lookup data gender_id: the unique identifier of the gender",
          "name": "get_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data height_cm: the height of the superhero",
          "name": "get_height_cms",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hair_colour_id: the id of the superhero's hair color",
          "name": "get_hair_colour_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data eye_colour_id: the id of the superhero's eye color",
          "name": "get_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 60,
      "input": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_full_name",
            "value": "Karen Beecher-Duncan"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "Brown",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.eye_colour_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_full_name",
            "value": "Karen Beecher-Duncan"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.eye_colour_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 61,
      "input": "What is the superpowers of the superhero has Helen Parr as their full name?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_full_name",
            "value": "Helen Parr"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Agility",
        "Durability",
        "Super Strength",
        "Size Changing",
        "Shapeshifting",
        "Invulnerability",
        "Elasticity"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.power_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T3": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_full_name",
            "value": "Helen Parr"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.power_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T3": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 62,
      "input": "Find the race of the superhero who weighs 108kg and is 188cm tall.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_weight_kg",
            "value": 108
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_height_cm",
            "value": 188
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "select_unique_values",
          "arguments": {
            "data": "$SELECT_COL_0$"
          },
          "label": "DISTINCT_COL_0"
        }
      ],
      "gold_answer": [
        "-",
        "Human"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.race_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "race",
                "modified_table_name": "race"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_weight_kg",
            "value": 108
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_height_cm",
            "value": 188
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "select_unique_values",
          "arguments": {
            "data": "$SELECT_COL_0$"
          },
          "label": "DISTINCT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.race_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "race",
              "modified_table_name": "race"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 63,
      "input": "What is the publisher name of the superhero ID 38?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_id",
            "value": 38
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_publisher_publisher_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "DC Comics",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.publisher_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_id",
            "value": 38
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_publisher_publisher_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.publisher_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_publisher_name: the name of the publisher",
          "name": "get_publisher_publisher_names",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 64,
      "input": "What is the race of the superhero with maximum attribute value?",
      "output": [
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "hero_attribute_attribute_value"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "gold_answer": "Human",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T1.race_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              },
              "T3": {
                "original_table_name": "race",
                "modified_table_name": "race"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "hero_attribute_attribute_value"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T1.race_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            },
            "T3": {
              "original_table_name": "race",
              "modified_table_name": "race"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 65,
      "input": "List down at least five full names of superheroes with blue eyes.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Blue"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 5
          },
          "label": "LIMIT"
        }
      ],
      "gold_answer": [
        "Abe Sapien",
        "Abin Sur",
        "Abraxas",
        "Absorbing Man",
        "Adam Monroe"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.eye_colour_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Blue"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 5
          },
          "label": "LIMIT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.eye_colour_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 66,
      "input": "Calculate the average attribute value of all neutral superheroes.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Neutral"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_mean",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value",
            "distinct": false
          },
          "label": "MEAN"
        }
      ],
      "gold_answer": 60.60897435897436,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.hero_id",
                "T2.id",
                "INNER"
              ],
              [
                "T2.alignment_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              },
              "T2": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T3": {
                "original_table_name": "alignment",
                "modified_table_name": "alignment"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Neutral"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_mean",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value",
            "distinct": false
          },
          "label": "MEAN"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.hero_id",
              "T2.id",
              "INNER"
            ],
            [
              "T2.alignment_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            },
            "T2": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T3": {
              "original_table_name": "alignment",
              "modified_table_name": "alignment"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data alignment_id: the unique identifier of the alignment",
          "name": "get_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data alignment_alignment: the alignment of the superhero",
          "name": "get_alignment_alignments",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        },
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_id",
          "description": "the unique identifier of the alignment",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_alignment",
          "description": "the alignment of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 67,
      "input": "List the skin colour of the superheroes with 100 attribute value.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "hero_attribute_attribute_value",
            "value": 100
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "select_unique_values",
          "arguments": {
            "data": "$SELECT_COL_0$"
          },
          "label": "DISTINCT_COL_0"
        }
      ],
      "gold_answer": [
        "No Colour",
        "Grey",
        "Gold",
        "Blue",
        "White",
        "Green",
        "Purple",
        "Blue/White",
        "Red",
        "Silver"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.skin_colour_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.id",
                "T3.hero_id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              },
              "T3": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "hero_attribute_attribute_value",
            "value": 100
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "select_unique_values",
          "arguments": {
            "data": "$SELECT_COL_0$"
          },
          "label": "DISTINCT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.skin_colour_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.id",
              "T3.hero_id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            },
            "T3": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        },
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 68,
      "input": "Count the good female superheroes.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Good"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "gender_gender",
            "value": "Female"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 164,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.alignment_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.gender_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "alignment",
                "modified_table_name": "alignment"
              },
              "T3": {
                "original_table_name": "gender",
                "modified_table_name": "gender"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Good"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "gender_gender",
            "value": "Female"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.alignment_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.gender_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "alignment",
              "modified_table_name": "alignment"
            },
            "T3": {
              "original_table_name": "gender",
              "modified_table_name": "gender"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data alignment_id: the unique identifier of the alignment",
          "name": "get_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data alignment_alignment: the alignment of the superhero",
          "name": "get_alignment_alignments",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data gender_id: the unique identifier of the gender",
          "name": "get_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Lookup data gender_gender: the gender of the superhero",
          "name": "get_gender_genders",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_id",
          "description": "the unique identifier of the alignment",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_alignment",
          "description": "the alignment of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "gender_id",
          "description": "the unique identifier of the gender",
          "dtype": "integer"
        },
        {
          "key_name": "gender_gender",
          "description": "the gender of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 69,
      "input": "Give the race of the blue-haired male superhero.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Blue"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "gender_gender",
            "value": "Male"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Mutant",
        "-",
        "Strontian"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.hair_colour_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.race_id",
                "T3.id",
                "INNER"
              ],
              [
                "T1.gender_id",
                "T4.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              },
              "T3": {
                "original_table_name": "race",
                "modified_table_name": "race"
              },
              "T4": {
                "original_table_name": "gender",
                "modified_table_name": "gender"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "colour_colour",
            "value": "Blue"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "gender_gender",
            "value": "Male"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.hair_colour_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.race_id",
              "T3.id",
              "INNER"
            ],
            [
              "T1.gender_id",
              "T4.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            },
            "T3": {
              "original_table_name": "race",
              "modified_table_name": "race"
            },
            "T4": {
              "original_table_name": "gender",
              "modified_table_name": "gender"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data gender_id: the unique identifier of the gender",
          "name": "get_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Lookup data gender_gender: the gender of the superhero",
          "name": "get_gender_genders",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "gender_id",
          "description": "the unique identifier of the gender",
          "dtype": "integer"
        },
        {
          "key_name": "gender_gender",
          "description": "the gender of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 70,
      "input": "How strong is the Hulk?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Hulk"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "attribute_attribute_name",
            "value": "Strength"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_hero_attribute_attribute_values",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": 100,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.attribute_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              },
              "T3": {
                "original_table_name": "attribute",
                "modified_table_name": "attribute"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Hulk"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "attribute_attribute_name",
            "value": "Strength"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_hero_attribute_attribute_values",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.attribute_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            },
            "T3": {
              "original_table_name": "attribute",
              "modified_table_name": "attribute"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_id: the unique identifier of the attribute",
          "name": "get_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_attribute_name: the attribute",
          "name": "get_attribute_attribute_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        },
        {
          "key_name": "attribute_id",
          "description": "the unique identifier of the attribute",
          "dtype": "integer"
        },
        {
          "key_name": "attribute_attribute_name",
          "description": "the attribute",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 71,
      "input": "List down Ajax's superpowers.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Ajax"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Agility",
        "Super Strength",
        "Super Speed",
        "Heat Generation",
        "Power Suit"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.power_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T3": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Ajax"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superpower_power_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.power_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T3": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 72,
      "input": "How many green-skinned villains are there in the superhero universe?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Bad"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "colour_colour",
            "value": "Green"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 6,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.alignment_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.skin_colour_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "alignment",
                "modified_table_name": "alignment"
              },
              "T3": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Bad"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "colour_colour",
            "value": "Green"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.alignment_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.skin_colour_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "alignment",
              "modified_table_name": "alignment"
            },
            "T3": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data alignment_id: the unique identifier of the alignment",
          "name": "get_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data alignment_alignment: the alignment of the superhero",
          "name": "get_alignment_alignments",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_id",
          "description": "the unique identifier of the alignment",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_alignment",
          "description": "the alignment of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 73,
      "input": "How many female superheroes are in Marvel Comics?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "Marvel Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "gender_gender",
            "value": "Female"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 111,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.publisher_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.gender_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              },
              "T3": {
                "original_table_name": "gender",
                "modified_table_name": "gender"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "Marvel Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "gender_gender",
            "value": "Female"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_id",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.publisher_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.gender_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            },
            "T3": {
              "original_table_name": "gender",
              "modified_table_name": "gender"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data gender_id: the unique identifier of the gender",
          "name": "get_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_publisher_name: the name of the publisher",
          "name": "get_publisher_publisher_names",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Lookup data gender_gender: the gender of the superhero",
          "name": "get_gender_genders",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        },
        {
          "key_name": "gender_id",
          "description": "the unique identifier of the gender",
          "dtype": "integer"
        },
        {
          "key_name": "gender_gender",
          "description": "the gender of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 74,
      "input": "Identify superheroes who can control wind and list their names in alphabetical order.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Wind Control"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_ascending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_superhero_name"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Crystal",
        "Red Tornado",
        "Tempest"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.power_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T3": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Wind Control"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_ascending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_superhero_name"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.power_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T3": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 75,
      "input": "Identify the gender of the superhero who has the ability of Phoenix Force.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Phoenix Force"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_gender_genders",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "Female",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.power_id",
                "T3.id",
                "INNER"
              ],
              [
                "T1.gender_id",
                "T4.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T3": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              },
              "T4": {
                "original_table_name": "gender",
                "modified_table_name": "gender"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Phoenix Force"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_gender_genders",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.power_id",
              "T3.id",
              "INNER"
            ],
            [
              "T1.gender_id",
              "T4.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T3": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            },
            "T4": {
              "original_table_name": "gender",
              "modified_table_name": "gender"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data gender_id: the unique identifier of the gender",
          "name": "get_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Lookup data gender_gender: the gender of the superhero",
          "name": "get_gender_genders",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        },
        {
          "key_name": "gender_id",
          "description": "the unique identifier of the gender",
          "dtype": "integer"
        },
        {
          "key_name": "gender_gender",
          "description": "the gender of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 76,
      "input": "Identify the heaviest superhero in DC Comics.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "DC Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_weight_kg"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "gold_answer": "Darkseid",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.publisher_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "DC Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_weight_kg"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_superhero_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.publisher_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_publisher_name: the name of the publisher",
          "name": "get_publisher_publisher_names",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 77,
      "input": "What is the average height of a non-human superhero in Dark Horse Comics?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "Dark Horse Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_not_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "race_race",
            "value": "Human"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_mean",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_height_cm",
            "distinct": false
          },
          "label": "MEAN"
        }
      ],
      "gold_answer": 109,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.publisher_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.race_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "publisher",
                "modified_table_name": "publisher"
              },
              "T3": {
                "original_table_name": "race",
                "modified_table_name": "race"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "publisher_publisher_name",
            "value": "Dark Horse Comics"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_not_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "race_race",
            "value": "Human"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_mean",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_height_cm",
            "distinct": false
          },
          "label": "MEAN"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.publisher_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.race_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "publisher",
              "modified_table_name": "publisher"
            },
            "T3": {
              "original_table_name": "race",
              "modified_table_name": "race"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_publisher_name: the name of the publisher",
          "name": "get_publisher_publisher_names",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the unique identifier of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_publisher_name",
          "description": "the name of the publisher",
          "dtype": "string"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 78,
      "input": "Count the fastest superheroes.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_attribute_name",
            "value": "Speed"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value",
            "value": 100
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_superhero_name",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "gold_answer": 40,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.attribute_id",
                "T2.id",
                "INNER"
              ],
              [
                "T1.hero_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              },
              "T2": {
                "original_table_name": "attribute",
                "modified_table_name": "attribute"
              },
              "T3": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "attribute_attribute_name",
            "value": "Speed"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value",
            "value": 100
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_count",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_superhero_name",
            "distinct": false
          },
          "label": "COUNT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.attribute_id",
              "T2.id",
              "INNER"
            ],
            [
              "T1.hero_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            },
            "T2": {
              "original_table_name": "attribute",
              "modified_table_name": "attribute"
            },
            "T3": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_id: the unique identifier of the attribute",
          "name": "get_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_attribute_name: the attribute",
          "name": "get_attribute_attribute_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        },
        {
          "key_name": "attribute_id",
          "description": "the unique identifier of the attribute",
          "dtype": "integer"
        },
        {
          "key_name": "attribute_attribute_name",
          "description": "the attribute",
          "dtype": "string"
        },
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 79,
      "input": "Identify the weakest attribute of the Black Panther.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Black Panther"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_ascending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_attribute_attribute_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "gold_answer": "Strength",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ],
              [
                "T2.attribute_id",
                "T3.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              },
              "T3": {
                "original_table_name": "attribute",
                "modified_table_name": "attribute"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Black Panther"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "sort_data_ascending",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "hero_attribute_attribute_value"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_attribute_attribute_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ],
            [
              "T2.attribute_id",
              "T3.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            },
            "T3": {
              "original_table_name": "attribute",
              "modified_table_name": "attribute"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_id: the unique identifier of the attribute",
          "name": "get_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data attribute_attribute_name: the attribute",
          "name": "get_attribute_attribute_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        },
        {
          "key_name": "attribute_id",
          "description": "the unique identifier of the attribute",
          "dtype": "integer"
        },
        {
          "key_name": "attribute_attribute_name",
          "description": "the attribute",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 80,
      "input": "What is Abomination's eye colour?",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Abomination"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "Green",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.eye_colour_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Abomination"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.eye_colour_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 81,
      "input": "Name the tallest superhero.",
      "output": [
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "height_cm"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "gold_answer": "Surtur",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [],
            "alias_to_table_dict": {
              "": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "sort_data_descending",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "height_cm"
          },
          "label": "SORTED_DF"
        },
        {
          "name": "get_superhero_names",
          "arguments": {
            "data": "$SORTED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "truncate",
          "arguments": {
            "data": "$SELECT_COL_0$",
            "n": 1
          },
          "label": "LIMIT"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [],
          "alias_to_table_dict": {
            "": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data alignment_id: the unique identifier of the alignment",
          "name": "get_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_name: the name of the superhero",
          "name": "get_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data skin_colour_id: the id of the superhero's skin color",
          "name": "get_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data full_name: the full name of the superhero",
          "name": "get_full_names",
          "arguments": {}
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data id: the unique identifier of the publisher",
          "name": "get_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data weight_kg: the weight of the superhero",
          "name": "get_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Lookup data gender_id: the unique identifier of the gender",
          "name": "get_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data height_cm: the height of the superhero",
          "name": "get_height_cms",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hair_colour_id: the id of the superhero's hair color",
          "name": "get_hair_colour_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data eye_colour_id: the id of the superhero's eye color",
          "name": "get_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 82,
      "input": "Name the superhero, otherwise known as Charles Chandler.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "full_name",
            "value": "Charles Chandler"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "3-D Man",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [],
            "alias_to_table_dict": {
              "": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "full_name",
            "value": "Charles Chandler"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [],
          "alias_to_table_dict": {
            "": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data alignment_id: the unique identifier of the alignment",
          "name": "get_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_name: the name of the superhero",
          "name": "get_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data skin_colour_id: the id of the superhero's skin color",
          "name": "get_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data full_name: the full name of the superhero",
          "name": "get_full_names",
          "arguments": {}
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data id: the unique identifier of the publisher",
          "name": "get_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data weight_kg: the weight of the superhero",
          "name": "get_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Lookup data gender_id: the unique identifier of the gender",
          "name": "get_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data height_cm: the height of the superhero",
          "name": "get_height_cms",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hair_colour_id: the id of the superhero's hair color",
          "name": "get_hair_colour_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data eye_colour_id: the id of the superhero's eye color",
          "name": "get_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 83,
      "input": "Provide the full name of the superhero named Alien.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_name",
            "value": "Alien"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_full_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "Xenomorph",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [],
            "alias_to_table_dict": {
              "": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_name",
            "value": "Alien"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_full_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [],
          "alias_to_table_dict": {
            "": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data alignment_id: the unique identifier of the alignment",
          "name": "get_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_name: the name of the superhero",
          "name": "get_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data skin_colour_id: the id of the superhero's skin color",
          "name": "get_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data full_name: the full name of the superhero",
          "name": "get_full_names",
          "arguments": {}
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data publisher_id: the unique identifier of the publisher",
          "name": "get_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data id: the unique identifier of the publisher",
          "name": "get_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data weight_kg: the weight of the superhero",
          "name": "get_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Lookup data gender_id: the unique identifier of the gender",
          "name": "get_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data height_cm: the height of the superhero",
          "name": "get_height_cms",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hair_colour_id: the id of the superhero's hair color",
          "name": "get_hair_colour_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data eye_colour_id: the id of the superhero's eye color",
          "name": "get_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 84,
      "input": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
      "output": [
        {
          "name": "select_data_less_than",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_weight_kg",
            "value": 100
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "colour_colour",
            "value": "Brown"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_full_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        "Charles Chandler",
        "Bob",
        null,
        "Angel Salvadore Bohusk",
        "Raymond Palmer",
        "Ryan Choi",
        "Michael Washington Lane",
        "Roberto Velasquez",
        "Dane Whitman",
        "Jefferson Pierce",
        "T'Challa",
        "Eric Brooks",
        "Donald Gill",
        "Jaime Reyes",
        "-",
        "Madison Jeffries",
        "Jericho Drumm",
        "Karen Beecher-Duncan",
        "Leonard Snart",
        null,
        "Jonothon Evan Starsmore",
        "Kevin Sidney",
        "Barbara Ann Minerva",
        null,
        "Tyrone Johnson",
        "Christopher Summers",
        "Burchell Clemens",
        "Scott Summers",
        "Christopher Powell",
        "Laynia Petrovna",
        null,
        "Floyd Lawton",
        "Willis Stryker",
        "Helen Parr",
        "Bonita Juarez",
        "Jason Rusch",
        "-",
        null,
        "-",
        "Dr. James McDonald Hudson",
        null,
        "Han Solo",
        "John Hancock",
        "Howard (Last name unrevealed)",
        null,
        "Robert Louis Drake",
        null,
        "John Wraith",
        "-",
        "Alyosha Kravinoff",
        "Yuriko Oyama",
        "Abner Jenkins",
        "Robert Kirkland Langstrom",
        "John Jameson",
        "John-117",
        "-",
        "Micah Sanders",
        "Reed Richards",
        "Moses Magnum",
        "Quentin Beck",
        "Nicholas Joseph Fury",
        "Richard Rider",
        null,
        "Amon Tomaz",
        "Daisy Louise Johnson",
        "Maxwell Jordan",
        null,
        "Rocket Raccoon",
        "Shang-Chi",
        "Gaveedra Seven",
        "Herman Schultz",
        "-",
        "Maria de Guadalupe Santiago",
        "Martha Franklin",
        "-",
        null,
        "Virgil Ovid Hawkins",
        "Roberto DaCosta",
        "Everett Thomas",
        "-",
        "Angel Salvadore Bohusk",
        null,
        "Phineas Mason",
        "Angelo Fortunato",
        "Francisco Paco Ramon",
        "Adrian Toomes",
        "James Rupert Rhodes",
        "Emil LaSalle",
        "-",
        null,
        "Yoda"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.eye_colour_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_less_than",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_weight_kg",
            "value": 100
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "colour_colour",
            "value": "Brown"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_full_names",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.eye_colour_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 85,
      "input": "List the attribute value of the superhero named Aquababy.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Aquababy"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_hero_attribute_attribute_values",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        60,
        20,
        15,
        15,
        15,
        15
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.id",
                "T2.hero_id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "hero_attribute",
                "modified_table_name": "hero_attribute"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Aquababy"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_hero_attribute_attribute_values",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.id",
              "T2.hero_id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "hero_attribute",
              "modified_table_name": "hero_attribute"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data hero_attribute_attribute_value: the attribute value",
          "name": "get_hero_attribute_attribute_values",
          "arguments": {}
        },
        {
          "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
          "name": "get_hero_attribute_attribute_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_attribute_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "hero_attribute_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_id",
          "description": "the id of the attribute\nMaps to attribute(id)",
          "dtype": "number"
        },
        {
          "key_name": "hero_attribute_attribute_value",
          "description": "the attribute value",
          "dtype": "number"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 86,
      "input": "Provide the weight and race of the superhero with superhero ID 40.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_id",
            "value": 40
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_weight_kgs",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_1"
        }
      ],
      "gold_answer": [
        63,
        "Human"
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.race_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "race",
                "modified_table_name": "race"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_id",
            "value": 40
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_superhero_weight_kgs",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        },
        {
          "name": "get_race_races",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_1"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.race_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "race",
              "modified_table_name": "race"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data race_id: the unique identifier of the race",
          "name": "get_race_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data race_race: the race of the superhero",
          "name": "get_race_races",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "race_id",
          "description": "the unique identifier of the race",
          "dtype": "integer"
        },
        {
          "key_name": "race_race",
          "description": "the race of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 87,
      "input": "Calculate the average height of all neutral superheroes.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Neutral"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_mean",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_height_cm",
            "distinct": false
          },
          "label": "MEAN"
        }
      ],
      "gold_answer": 164.82142857142858,
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.alignment_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "alignment",
                "modified_table_name": "alignment"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "alignment_alignment",
            "value": "Neutral"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "compute_data_mean",
          "arguments": {
            "data": "$FILTERED_DF$",
            "key_name": "superhero_height_cm",
            "distinct": false
          },
          "label": "MEAN"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.alignment_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "alignment",
              "modified_table_name": "alignment"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data alignment_id: the unique identifier of the alignment",
          "name": "get_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data alignment_alignment: the alignment of the superhero",
          "name": "get_alignment_alignments",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_id",
          "description": "the unique identifier of the alignment",
          "dtype": "integer"
        },
        {
          "key_name": "alignment_alignment",
          "description": "the alignment of the superhero",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 88,
      "input": "List the hero ID of superheroes have intellegence as their power.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Intelligence"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_hero_power_hero_ids",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": [
        3,
        5,
        6,
        9,
        15,
        21,
        31,
        32,
        33,
        39,
        50,
        51,
        52,
        53,
        58,
        67,
        73,
        74,
        77,
        79,
        96,
        100,
        102,
        112,
        128,
        130,
        135,
        139,
        140,
        146,
        149,
        160,
        161,
        162,
        163,
        179,
        198,
        202,
        207,
        209,
        210,
        214,
        216,
        221,
        231,
        239,
        244,
        251,
        259,
        274,
        275,
        279,
        281,
        283,
        284,
        290,
        298,
        303,
        304,
        312,
        318,
        319,
        333,
        337,
        348,
        351,
        352,
        354,
        357,
        358,
        360,
        362,
        364,
        366,
        369,
        377,
        380,
        382,
        392,
        393,
        412,
        414,
        415,
        419,
        423,
        424,
        427,
        428,
        433,
        438,
        441,
        445,
        446,
        447,
        463,
        471,
        472,
        473,
        474,
        475,
        478,
        495,
        496,
        497,
        506,
        513,
        516,
        518,
        519,
        520,
        521,
        523,
        529,
        540,
        541,
        543,
        544,
        551,
        554,
        557,
        565,
        568,
        577,
        578,
        580,
        589,
        595,
        604,
        607,
        608,
        612,
        635,
        637,
        642,
        650,
        653,
        657,
        660,
        661,
        665,
        666,
        667,
        669,
        670,
        673,
        676,
        679,
        694,
        711,
        721,
        722,
        733,
        734,
        743,
        745,
        754
      ],
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.power_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "hero_power",
                "modified_table_name": "hero_power"
              },
              "T2": {
                "original_table_name": "superpower",
                "modified_table_name": "superpower"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superpower_power_name",
            "value": "Intelligence"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_hero_power_hero_ids",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.power_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "hero_power",
              "modified_table_name": "hero_power"
            },
            "T2": {
              "original_table_name": "superpower",
              "modified_table_name": "superpower"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Lookup data superpower_id: the unique identifier of the superpower",
          "name": "get_superpower_ids",
          "arguments": {}
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superpower_power_name: the superpower name",
          "name": "get_superpower_power_names",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
          "name": "get_hero_power_power_ids",
          "arguments": {}
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
          "name": "get_hero_power_hero_ids",
          "arguments": {}
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "hero_power_hero_id",
          "description": "the id of the hero\nMaps to superhero(id)",
          "dtype": "integer"
        },
        {
          "key_name": "hero_power_power_id",
          "description": "the id of the power\nMaps to superpower(id)",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_id",
          "description": "the unique identifier of the superpower",
          "dtype": "integer"
        },
        {
          "key_name": "superpower_power_name",
          "description": "the superpower name",
          "dtype": "string"
        }
      ],
      "ignore": false
    },
    {
      "sample_id": 89,
      "input": "Give the eye colour of Blackwulf.",
      "output": [
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Blackwulf"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "gold_answer": "Red",
      "original_output": [
        {
          "name": "initialize_active_data",
          "arguments": {
            "condition_sequence": [
              [
                "T1.eye_colour_id",
                "T2.id",
                "INNER"
              ]
            ],
            "alias_to_table_dict": {
              "T1": {
                "original_table_name": "superhero",
                "modified_table_name": "superhero"
              },
              "T2": {
                "original_table_name": "colour",
                "modified_table_name": "colour"
              }
            },
            "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
          },
          "label": "starting_table_var"
        },
        {
          "name": "select_data_equal_to",
          "arguments": {
            "data": "$starting_table_var$",
            "key_name": "superhero_superhero_name",
            "value": "Blackwulf"
          },
          "label": "FILTERED_DF"
        },
        {
          "name": "get_colour_colours",
          "arguments": {
            "data": "$FILTERED_DF$"
          },
          "label": "SELECT_COL_0"
        }
      ],
      "initialization_step": {
        "name": "initialize_active_data",
        "arguments": {
          "condition_sequence": [
            [
              "T1.eye_colour_id",
              "T2.id",
              "INNER"
            ]
          ],
          "alias_to_table_dict": {
            "T1": {
              "original_table_name": "superhero",
              "modified_table_name": "superhero"
            },
            "T2": {
              "original_table_name": "colour",
              "modified_table_name": "colour"
            }
          },
          "database_path": "/Users/benjaminelder/ai4ba/invocable-api-hub/invocable_api_hub/driver/../../db/dev_databases/cache/superhero.sqlite"
        },
        "label": "starting_table_var"
      },
      "tools": [
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_ascending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the maximum value in a list.",
          "name": "compute_data_argmax",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Transform list of string values by taking substrings",
          "name": "transform_data_to_substring",
          "arguments": {
            "key_name": {
              "description": "name of string valued key to transform",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "start_index": {
              "description": "start of substring",
              "type": "integer"
            },
            "end_index": {
              "description": "end of substring, must be >= start_index",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
          "name": "sort_data_descending",
          "arguments": {
            "key_name": {
              "description": "name of key to sort by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "ascending": {
              "description": "whether to sort by ascending order",
              "type": "boolean"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Group data by values of a specified key",
          "name": "group_data_by",
          "arguments": {
            "key_name": {
              "description": "name of key to group by",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_publisher_id: the id of the publisher",
          "name": "get_superhero_publisher_ids",
          "arguments": {}
        },
        {
          "description": "Return the number of elements in a list.",
          "name": "compute_data_count",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_id: the unique identifier of the color",
          "name": "get_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the standard deviation of values in a list.",
          "name": "compute_data_std",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
          "name": "get_colour_colours",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is equal to the given value.",
          "name": "select_data_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value contains the given value (applies to strings).",
          "name": "select_data_contains",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the maximum value from a list.",
          "name": "compute_data_max",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
          "name": "get_superhero_gender_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_race_id: the id of the superhero's race",
          "name": "get_superhero_race_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is less than or equal to the given value.",
          "name": "select_data_less_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the minimum value from a list.",
          "name": "compute_data_min",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_id: the unique identifier of the superhero",
          "name": "get_superhero_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_superhero_name: the name of the superhero",
          "name": "get_superhero_superhero_names",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
          "name": "get_superhero_eye_colour_ids",
          "arguments": {}
        },
        {
          "description": "Return the mean of values in a list.",
          "name": "compute_data_mean",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
          "name": "select_data_like",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is greater than the given value.",
          "name": "select_data_greater_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
          "name": "get_superhero_alignment_ids",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is greater than or equal to the given value.",
          "name": "select_data_greater_than_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return only the distinct elements from the input list.",
          "name": "select_unique_values",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
          "name": "get_superhero_skin_colour_ids",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_height_cm: the height of the superhero",
          "name": "get_superhero_height_cms",
          "arguments": {}
        },
        {
          "description": "Lookup data superhero_weight_kg: the weight of the superhero",
          "name": "get_superhero_weight_kgs",
          "arguments": {}
        },
        {
          "description": "Filters rows where the column's value is not equal to the given value.",
          "name": "select_data_not_equal_to",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the sum of values in a list.",
          "name": "compute_data_sum",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Filters rows where the column's value is less than the given value.",
          "name": "select_data_less_than",
          "arguments": {
            "key_name": {
              "description": "The key on which the filter will be applied.",
              "type": "string",
              "enum": [
                "ALLOWED_VALUES_FOR_KEY_NAME"
              ]
            },
            "value": {
              "description": "The value to compare against in the filtering operation.",
              "type": "object"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Return the index of the minimum value in a list.",
          "name": "compute_data_argmin",
          "arguments": {
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_full_name: the full name of the superhero",
          "name": "get_superhero_full_names",
          "arguments": {}
        },
        {
          "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
          "name": "truncate",
          "arguments": {
            "n": {
              "description": "The number of rows/elements to return.",
              "type": "integer"
            },
            "data_source": {
              "description": "Location of data source file",
              "type": "string"
            }
          }
        },
        {
          "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
          "name": "get_superhero_hair_colour_ids",
          "arguments": {}
        }
      ],
      "key_values_and_descriptions": [
        {
          "key_name": "superhero_id",
          "description": "the unique identifier of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_superhero_name",
          "description": "the name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_full_name",
          "description": "the full name of the superhero",
          "dtype": "string"
        },
        {
          "key_name": "superhero_gender_id",
          "description": "the id of the superhero's gender",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_eye_colour_id",
          "description": "the id of the superhero's eye color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_hair_colour_id",
          "description": "the id of the superhero's hair color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_skin_colour_id",
          "description": "the id of the superhero's skin color",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_race_id",
          "description": "the id of the superhero's race",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_publisher_id",
          "description": "the id of the publisher",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_alignment_id",
          "description": "the id of the superhero's alignment",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_height_cm",
          "description": "the height of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "superhero_weight_kg",
          "description": "the weight of the superhero",
          "dtype": "integer"
        },
        {
          "key_name": "colour_id",
          "description": "the unique identifier of the color",
          "dtype": "integer"
        },
        {
          "key_name": "colour_colour",
          "description": "the color of the superhero's skin/eye/hair/etc",
          "dtype": "string"
        }
      ],
      "ignore": false
    }
  ],
  "global_api_pool": {
    "get_superhero_ids": {
      "description": "Lookup data superhero_id: the unique identifier of the superhero",
      "name": "get_superhero_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superhero_superhero_names": {
      "description": "Lookup data superhero_superhero_name: the name of the superhero",
      "name": "get_superhero_superhero_names",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superhero_full_names": {
      "description": "Lookup data superhero_full_name: the full name of the superhero",
      "name": "get_superhero_full_names",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superhero_gender_ids": {
      "description": "Lookup data superhero_gender_id: the id of the superhero's gender",
      "name": "get_superhero_gender_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superhero_eye_colour_ids": {
      "description": "Lookup data superhero_eye_colour_id: the id of the superhero's eye color",
      "name": "get_superhero_eye_colour_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superhero_hair_colour_ids": {
      "description": "Lookup data superhero_hair_colour_id: the id of the superhero's hair color",
      "name": "get_superhero_hair_colour_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superhero_skin_colour_ids": {
      "description": "Lookup data superhero_skin_colour_id: the id of the superhero's skin color",
      "name": "get_superhero_skin_colour_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superhero_race_ids": {
      "description": "Lookup data superhero_race_id: the id of the superhero's race",
      "name": "get_superhero_race_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superhero_publisher_ids": {
      "description": "Lookup data superhero_publisher_id: the id of the publisher",
      "name": "get_superhero_publisher_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superhero_alignment_ids": {
      "description": "Lookup data superhero_alignment_id: the id of the superhero's alignment",
      "name": "get_superhero_alignment_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superhero_height_cms": {
      "description": "Lookup data superhero_height_cm: the height of the superhero",
      "name": "get_superhero_height_cms",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superhero_weight_kgs": {
      "description": "Lookup data superhero_weight_kg: the weight of the superhero",
      "name": "get_superhero_weight_kgs",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_hero_power_hero_ids": {
      "description": "Lookup data hero_power_hero_id: the id of the hero Maps to superhero(id)",
      "name": "get_hero_power_hero_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_hero_power_power_ids": {
      "description": "Lookup data hero_power_power_id: the id of the power Maps to superpower(id)",
      "name": "get_hero_power_power_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superpower_ids": {
      "description": "Lookup data superpower_id: the unique identifier of the superpower",
      "name": "get_superpower_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superpower_power_names": {
      "description": "Lookup data superpower_power_name: the superpower name",
      "name": "get_superpower_power_names",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "truncate": {
      "description": "Return the first `n` rows of a table or the first `n` elements of a list-like object.",
      "name": "truncate",
      "parameters": {
        "properties": {
          "data": {
            "description": "A table (dict) or a list-like object.",
            "oneOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              }
            ]
          },
          "n": {
            "description": "The number of rows/elements to return.",
            "type": "integer"
          }
        },
        "required": [
          "data",
          "n"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "select_unique_values": {
      "description": "Return only the distinct elements from the input list.",
      "name": "select_unique_values",
      "parameters": {
        "properties": {
          "data": {
            "description": "A list of input data",
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "The distinct elements of the input list",
            "type": "array"
          }
        }
      }
    },
    "group_data_by": {
      "description": "Group data by values of a specified key",
      "name": "group_data_by",
      "parameters": {
        "properties": {
          "data": {
            "description": "Table of data to be grouped",
            "type": "object"
          },
          "key_name": {
            "description": "name of key to group by",
            "type": "string",
            "enum": [
              "ALLOWED_VALUES_FOR_KEY_NAME"
            ]
          }
        },
        "required": [
          "data",
          "key_name"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "data with additional layer of keys given by unique values in the column given by `key_name`",
            "type": "object"
          }
        }
      }
    },
    "transform_data_to_substring": {
      "description": "Transform list of string values by taking substrings",
      "name": "transform_data_to_substring",
      "parameters": {
        "properties": {
          "data": {
            "description": "table containing the data to be transformed",
            "type": "object"
          },
          "key_name": {
            "description": "name of string valued key to transform",
            "type": "string",
            "enum": [
              "ALLOWED_VALUES_FOR_KEY_NAME"
            ]
          },
          "start_index": {
            "description": "start of substring",
            "type": "integer"
          },
          "end_index": {
            "description": "end of substring, must be >= start_index",
            "type": "integer"
          }
        },
        "required": [
          "data",
          "key_name",
          "start_index",
          "end_index"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "original table (dict) with the specified key values transformed",
            "type": "object"
          }
        }
      }
    },
    "initialize_active_data": {
      "description": "Initializes active data based on the provided condition sequence, alias-to-table mapping, and database path.  This function checks the validity of the database file at the specified path and raises an exception if the file is not found. After validating the database path, the function processes the condition sequence and alias-to-table dictionary to return a dictionary of active data.",
      "name": "initialize_active_data",
      "parameters": {
        "properties": {
          "condition_sequence": {
            "description": "A list of conditions (joins) to be processed for initializing the data.",
            "type": "array"
          },
          "alias_to_table_dict": {
            "description": "A dictionary mapping aliases to their respective tables.",
            "type": "object"
          },
          "database_path": {
            "description": "The file path to the database that will be used for the initialization.",
            "type": "string"
          }
        },
        "required": [
          "condition_sequence",
          "alias_to_table_dict",
          "database_path"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "A dictionary representing the initialized active data based on the conditions and table mappings.",
            "type": "object"
          }
        }
      }
    },
    "select_data_equal_to": {
      "description": "Filters rows where the column's value is equal to the given value.",
      "name": "select_data_equal_to",
      "parameters": {
        "properties": {
          "data": {
            "description": "The input data to filter.",
            "type": "object"
          },
          "key_name": {
            "description": "The key on which the filter will be applied.",
            "type": "string",
            "enum": [
              "ALLOWED_VALUES_FOR_KEY_NAME"
            ]
          },
          "value": {
            "description": "The value to compare against in the filtering operation.",
            "type": "object"
          }
        },
        "required": [
          "data",
          "key_name",
          "value"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "A new table (dict) containing the rows from the input data that meet the specified condition.",
            "type": "object"
          }
        }
      }
    },
    "select_data_not_equal_to": {
      "description": "Filters rows where the column's value is not equal to the given value.",
      "name": "select_data_not_equal_to",
      "parameters": {
        "properties": {
          "data": {
            "description": "The input data to filter.",
            "type": "object"
          },
          "key_name": {
            "description": "The key on which the filter will be applied.",
            "type": "string",
            "enum": [
              "ALLOWED_VALUES_FOR_KEY_NAME"
            ]
          },
          "value": {
            "description": "The value to compare against in the filtering operation.",
            "type": "object"
          }
        },
        "required": [
          "data",
          "key_name",
          "value"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "A new table (dict) containing the rows from the input data that meet the specified condition.",
            "type": "object"
          }
        }
      }
    },
    "select_data_greater_than": {
      "description": "Filters rows where the column's value is greater than the given value.",
      "name": "select_data_greater_than",
      "parameters": {
        "properties": {
          "data": {
            "description": "The input data to filter.",
            "type": "object"
          },
          "key_name": {
            "description": "The key on which the filter will be applied.",
            "type": "string",
            "enum": [
              "ALLOWED_VALUES_FOR_KEY_NAME"
            ]
          },
          "value": {
            "description": "The value to compare against in the filtering operation.",
            "type": "object"
          }
        },
        "required": [
          "data",
          "key_name",
          "value"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "A new table (dict) containing the rows from the input data that meet the specified condition.",
            "type": "object"
          }
        }
      }
    },
    "select_data_less_than": {
      "description": "Filters rows where the column's value is less than the given value.",
      "name": "select_data_less_than",
      "parameters": {
        "properties": {
          "data": {
            "description": "The input data to filter.",
            "type": "object"
          },
          "key_name": {
            "description": "The key on which the filter will be applied.",
            "type": "string",
            "enum": [
              "ALLOWED_VALUES_FOR_KEY_NAME"
            ]
          },
          "value": {
            "description": "The value to compare against in the filtering operation.",
            "type": "object"
          }
        },
        "required": [
          "data",
          "key_name",
          "value"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "A new table (dict) containing the rows from the input data that meet the specified condition.",
            "type": "object"
          }
        }
      }
    },
    "select_data_greater_than_equal_to": {
      "description": "Filters rows where the column's value is greater than or equal to the given value.",
      "name": "select_data_greater_than_equal_to",
      "parameters": {
        "properties": {
          "data": {
            "description": "The input data to filter.",
            "type": "object"
          },
          "key_name": {
            "description": "The key on which the filter will be applied.",
            "type": "string",
            "enum": [
              "ALLOWED_VALUES_FOR_KEY_NAME"
            ]
          },
          "value": {
            "description": "The value to compare against in the filtering operation.",
            "type": "object"
          }
        },
        "required": [
          "data",
          "key_name",
          "value"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "A new table (dict) containing the rows from the input data that meet the specified condition.",
            "type": "object"
          }
        }
      }
    },
    "select_data_less_than_equal_to": {
      "description": "Filters rows where the column's value is less than or equal to the given value.",
      "name": "select_data_less_than_equal_to",
      "parameters": {
        "properties": {
          "data": {
            "description": "The input data to filter.",
            "type": "object"
          },
          "key_name": {
            "description": "The key on which the filter will be applied.",
            "type": "string",
            "enum": [
              "ALLOWED_VALUES_FOR_KEY_NAME"
            ]
          },
          "value": {
            "description": "The value to compare against in the filtering operation.",
            "type": "object"
          }
        },
        "required": [
          "data",
          "key_name",
          "value"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "A new table (dict) containing the rows from the input data that meet the specified condition.",
            "type": "object"
          }
        }
      }
    },
    "select_data_contains": {
      "description": "Filters rows where the column's value contains the given value (applies to strings).",
      "name": "select_data_contains",
      "parameters": {
        "properties": {
          "data": {
            "description": "The input data to filter.",
            "type": "object"
          },
          "key_name": {
            "description": "The key on which the filter will be applied.",
            "type": "string",
            "enum": [
              "ALLOWED_VALUES_FOR_KEY_NAME"
            ]
          },
          "value": {
            "description": "The value to compare against in the filtering operation.",
            "type": "object"
          }
        },
        "required": [
          "data",
          "key_name",
          "value"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "A new table (dict) containing the rows from the input data that meet the specified condition.",
            "type": "object"
          }
        }
      }
    },
    "select_data_like": {
      "description": "Filters rows where the column's value matches a regex pattern (applies to strings).",
      "name": "select_data_like",
      "parameters": {
        "properties": {
          "data": {
            "description": "The input data to filter.",
            "type": "object"
          },
          "key_name": {
            "description": "The key on which the filter will be applied.",
            "type": "string",
            "enum": [
              "ALLOWED_VALUES_FOR_KEY_NAME"
            ]
          },
          "value": {
            "description": "The value to compare against in the filtering operation.",
            "type": "object"
          }
        },
        "required": [
          "data",
          "key_name",
          "value"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "A new table (dict) containing the rows from the input data that meet the specified condition.",
            "type": "object"
          }
        }
      }
    },
    "sort_data_ascending": {
      "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
      "name": "sort_data_ascending",
      "parameters": {
        "properties": {
          "data": {
            "description": "table in json format",
            "type": "object"
          },
          "key_name": {
            "description": "name of key to sort by",
            "type": "string",
            "enum": [
              "ALLOWED_VALUES_FOR_KEY_NAME"
            ]
          },
          "ascending": {
            "description": "whether to sort by ascending order",
            "type": "boolean"
          }
        },
        "required": [
          "data",
          "key_name",
          "ascending"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "data sorted by chosen key",
            "type": "object"
          }
        }
      }
    },
    "sort_data_descending": {
      "description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'",
      "name": "sort_data_descending",
      "parameters": {
        "properties": {
          "data": {
            "description": "table in json format",
            "type": "object"
          },
          "key_name": {
            "description": "name of key to sort by",
            "type": "string",
            "enum": [
              "ALLOWED_VALUES_FOR_KEY_NAME"
            ]
          },
          "ascending": {
            "description": "whether to sort by ascending order",
            "type": "boolean"
          }
        },
        "required": [
          "data",
          "key_name",
          "ascending"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "data sorted by chosen key",
            "type": "object"
          }
        }
      }
    },
    "compute_data_min": {
      "description": "Return the minimum value from a list.",
      "name": "compute_data_min",
      "parameters": {
        "properties": {
          "data": {
            "description": "A list of numbers.",
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "The minimum value in the input data.",
            "type": "number"
          }
        }
      }
    },
    "compute_data_max": {
      "description": "Return the maximum value from a list.",
      "name": "compute_data_max",
      "parameters": {
        "properties": {
          "data": {
            "description": "A list of numbers.",
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "The maximum value in the input data.",
            "type": "number"
          }
        }
      }
    },
    "compute_data_sum": {
      "description": "Return the sum of values in a list.",
      "name": "compute_data_sum",
      "parameters": {
        "properties": {
          "data": {
            "description": "A list of numbers.",
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "The sum of the input data.",
            "type": "number"
          }
        }
      }
    },
    "compute_data_mean": {
      "description": "Return the mean of values in a list.",
      "name": "compute_data_mean",
      "parameters": {
        "properties": {
          "data": {
            "description": "A list of numbers.",
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "The mean of the input data.",
            "type": "number"
          }
        }
      }
    },
    "compute_data_count": {
      "description": "Return the number of elements in a list.",
      "name": "compute_data_count",
      "parameters": {
        "properties": {
          "data": {
            "description": "A list of numbers.",
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "The number of elements in the input data.",
            "type": "integer"
          }
        }
      }
    },
    "compute_data_std": {
      "description": "Return the standard deviation of values in a list.",
      "name": "compute_data_std",
      "parameters": {
        "properties": {
          "data": {
            "description": "A list of numbers.",
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "The standard deviation of the input data.",
            "type": "number"
          }
        }
      }
    },
    "compute_data_argmin": {
      "description": "Return the index of the minimum value in a list.",
      "name": "compute_data_argmin",
      "parameters": {
        "properties": {
          "data": {
            "description": "A list of numbers.",
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "The index of the minimum value in the input data.",
            "type": "integer"
          }
        }
      }
    },
    "compute_data_argmax": {
      "description": "Return the index of the maximum value in a list.",
      "name": "compute_data_argmax",
      "parameters": {
        "properties": {
          "data": {
            "description": "A list of numbers.",
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "The index of the maximum value in the input data.",
            "type": "integer"
          }
        }
      }
    },
    "get_colour_ids": {
      "description": "Lookup data colour_id: the unique identifier of the color",
      "name": "get_colour_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_colour_colours": {
      "description": "Lookup data colour_colour: the color of the superhero's skin/eye/hair/etc",
      "name": "get_colour_colours",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_colour_1_ids": {
      "description": "Lookup data colour_1_id: the unique identifier of the color",
      "name": "get_colour_1_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_colour_1_colours": {
      "description": "Lookup data colour_1_colour: the color of the superhero's skin/eye/hair/etc",
      "name": "get_colour_1_colours",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_publisher_ids": {
      "description": "Lookup data publisher_id: the unique identifier of the publisher",
      "name": "get_publisher_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_publisher_publisher_names": {
      "description": "Lookup data publisher_publisher_name: the name of the publisher",
      "name": "get_publisher_publisher_names",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_hero_attribute_hero_ids": {
      "description": "Lookup data hero_attribute_hero_id: the id of the hero Maps to superhero(id)",
      "name": "get_hero_attribute_hero_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_hero_attribute_attribute_ids": {
      "description": "Lookup data hero_attribute_attribute_id: the id of the attribute Maps to attribute(id)",
      "name": "get_hero_attribute_attribute_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_hero_attribute_attribute_values": {
      "description": "Lookup data hero_attribute_attribute_value: the attribute value",
      "name": "get_hero_attribute_attribute_values",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_attribute_ids": {
      "description": "Lookup data attribute_id: the unique identifier of the attribute",
      "name": "get_attribute_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_attribute_attribute_names": {
      "description": "Lookup data attribute_attribute_name: the attribute",
      "name": "get_attribute_attribute_names",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_race_ids": {
      "description": "Lookup data race_id: the unique identifier of the race",
      "name": "get_race_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_race_races": {
      "description": "Lookup data race_race: the race of the superhero",
      "name": "get_race_races",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_gender_ids": {
      "description": "Lookup data gender_id: the unique identifier of the gender",
      "name": "get_gender_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_gender_genders": {
      "description": "Lookup data gender_gender: the gender of the superhero",
      "name": "get_gender_genders",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_ids": {
      "description": "Lookup data id: the unique identifier of the publisher",
      "name": "get_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_publisher_names": {
      "description": "Lookup data publisher_name: the name of the publisher",
      "name": "get_publisher_names",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_hero_ids": {
      "description": "Lookup data hero_id: the id of the hero Maps to superhero(id)",
      "name": "get_hero_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_attribute_values": {
      "description": "Lookup data attribute_value: the attribute value",
      "name": "get_attribute_values",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_alignment_ids": {
      "description": "Lookup data alignment_id: the unique identifier of the alignment",
      "name": "get_alignment_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_alignment_alignments": {
      "description": "Lookup data alignment_alignment: the alignment of the superhero",
      "name": "get_alignment_alignments",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_superhero_names": {
      "description": "Lookup data superhero_name: the name of the superhero",
      "name": "get_superhero_names",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_full_names": {
      "description": "Lookup data full_name: the full name of the superhero",
      "name": "get_full_names",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_eye_colour_ids": {
      "description": "Lookup data eye_colour_id: the id of the superhero's eye color",
      "name": "get_eye_colour_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_hair_colour_ids": {
      "description": "Lookup data hair_colour_id: the id of the superhero's hair color",
      "name": "get_hair_colour_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_skin_colour_ids": {
      "description": "Lookup data skin_colour_id: the id of the superhero's skin color",
      "name": "get_skin_colour_ids",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_height_cms": {
      "description": "Lookup data height_cm: the height of the superhero",
      "name": "get_height_cms",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_weight_kgs": {
      "description": "Lookup data weight_kg: the weight of the superhero",
      "name": "get_weight_kgs",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    },
    "get_power_names": {
      "description": "Lookup data power_name: the superpower name",
      "name": "get_power_names",
      "parameters": {
        "properties": {},
        "required": [],
        "type": "object"
      },
      "output_parameters": {
        "properties": {
          "output_0": {
            "description": "",
            "type": "object"
          }
        }
      }
    }
  },
  "win_rate": 0.0,
  "dataset": "superhero"
}