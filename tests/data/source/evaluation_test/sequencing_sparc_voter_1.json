{"global_api_pool": {"get_area_codes": {"description": "Lookup data area_code: This column contains three-digit area codes for various regions.", "name": "get_area_codes", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, "get_states": {"description": "Lookup data state: This column contains the two-letter abbreviations for the states corresponding to the area codes.", "name": "get_states", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, "group_data_by": {"description": "Group data by values of a specified key", "name": "group_data_by", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to group by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}}, "required": ["data_source", "key_name"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data with additional layer of keys given by unique values in the column given by `key_name`", "type": "string"}}}}, "transform_data_to_substring": {"description": "Transform list of string values by taking substrings", "name": "transform_data_to_substring", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of string valued key to transform: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "start_index": {"description": "start of substring", "schema": {"type": "integer"}}, "end_index": {"description": "end of substring, must be >= start_index", "schema": {"type": "integer"}}}, "required": ["data_source", "key_name", "start_index", "end_index"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  original table (dict) with the specified key values transformed", "type": "string"}}}}, "initialize_active_data": {"description": "Initializes active data based on the provided condition sequence, alias-to-table mapping, and database path.  This function checks the validity of the database file at the specified path and raises an exception if the file is not found. After validating the database path, the function processes the condition sequence and alias-to-table dictionary to return a dictionary of active data.", "name": "initialize_active_data", "parameters": {"properties": {"condition_sequence": {"description": "A list of conditions (joins) to be processed for initializing the data.", "schema": {"type": "array"}}, "alias_to_table_dict": {"description": "A dictionary mapping aliases to their respective tables.", "schema": {"type": "object"}}, "database_path": {"description": "The file path to the database that will be used for the initialization.", "schema": {"type": "string"}}}, "required": ["condition_sequence", "alias_to_table_dict", "database_path"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a dictionary representing the initialized active data based on the conditions and table mappings.", "type": "string"}}}}, "truncate": {"description": "Return the first `n` elements of a list-like object.", "name": "truncate", "parameters": {"properties": {"truncate_array": {"description": "A list-like object.", "schema": {"type": "object"}}, "n": {"description": "The number of rows/elements to return.", "schema": {"type": "integer"}}}, "required": ["truncate_array", "n"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The first `n` elements of the list-like object.", "type": "array"}}}}, "select_unique_values": {"description": "Return only the distinct elements from the input list.", "name": "select_unique_values", "parameters": {"properties": {"unique_array": {"description": "A list of input data", "schema": {"type": "array"}}}, "required": ["unique_array"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The distinct elements of the input list", "type": "array"}}}}, "select_data_equal_to": {"description": "Filters rows where the column's value is equal to the given value.", "name": "select_data_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, "select_data_not_equal_to": {"description": "Filters rows where the column's value is not equal to the given value.", "name": "select_data_not_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, "select_data_greater_than": {"description": "Filters rows where the column's value is greater than the given value.", "name": "select_data_greater_than", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, "select_data_less_than": {"description": "Filters rows where the column's value is less than the given value.", "name": "select_data_less_than", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, "select_data_greater_than_equal_to": {"description": "Filters rows where the column's value is greater than or equal to the given value.", "name": "select_data_greater_than_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, "select_data_less_than_equal_to": {"description": "Filters rows where the column's value is less than or equal to the given value.", "name": "select_data_less_than_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, "select_data_contains": {"description": "Filters rows where the column's value contains the given value (applies to strings).", "name": "select_data_contains", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, "select_data_like": {"description": "Filters rows where the column's value matches a regex pattern (applies to strings).", "name": "select_data_like", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, "sort_data_ascending": {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_ascending", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}, "required": ["data_source", "key_name", "ascending"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data sorted by chosen key", "type": "string"}}}}, "sort_data_descending": {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_descending", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}, "required": ["data_source", "key_name", "ascending"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data sorted by chosen key", "type": "string"}}}}, "compute_data_min": {"description": "Return the minimum value from a list.", "name": "compute_data_min", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the minimum value in the input data.", "type": "string"}}}}, "compute_data_max": {"description": "Return the maximum value from a list.", "name": "compute_data_max", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the maximum value in the input data.", "type": "string"}}}}, "compute_data_sum": {"description": "Return the sum of values in a list.", "name": "compute_data_sum", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the sum of the input data.", "type": "string"}}}}, "compute_data_mean": {"description": "Return the mean of values in a list.", "name": "compute_data_mean", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the mean of the input data.", "type": "string"}}}}, "compute_data_count": {"description": "Return the number of elements in a list.", "name": "compute_data_count", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the number of elements in the input data.", "type": "string"}}}}, "compute_data_std": {"description": "Return the standard deviation of values in a list.", "name": "compute_data_std", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the standard deviation of the input data.", "type": "string"}}}}, "compute_data_argmin": {"description": "Return the index of the minimum value in a list.", "name": "compute_data_argmin", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the index of the minimum value in the input data.", "type": "string"}}}}, "compute_data_argmax": {"description": "Return the index of the maximum value in a list.", "name": "compute_data_argmax", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the index of the maximum value in the input data.", "type": "string"}}}}, "get_contestant_numbers": {"description": "Lookup data contestant_number: A unique identifier assigned to each contestant.", "name": "get_contestant_numbers", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, "get_contestant_names": {"description": "Lookup data contestant_name: The full name of each contestant.", "name": "get_contestant_names", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, "get_vote_ids": {"description": "Lookup data vote_id: Unique identifier for each vote record.", "name": "get_vote_ids", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, "get_phone_numbers": {"description": "Lookup data phone_number: Phone number associated with the vote.", "name": "get_phone_numbers", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, "get_createds": {"description": "Lookup data created: Timestamp indicating when the vote was recorded.", "name": "get_createds", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, "get_contestants_contestant_numbers": {"description": "Lookup data contestants_contestant_number: A unique identifier assigned to each contestant.", "name": "get_contestants_contestant_numbers", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, "get_contestants_contestant_names": {"description": "Lookup data contestants_contestant_name: The full name of each contestant.", "name": "get_contestants_contestant_names", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, "get_votes_vote_ids": {"description": "Lookup data votes_vote_id: Unique identifier for each vote record.", "name": "get_votes_vote_ids", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, "get_votes_phone_numbers": {"description": "Lookup data votes_phone_number: Phone number associated with the vote.", "name": "get_votes_phone_numbers", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, "get_votes_states": {"description": "Lookup data votes_state: State from which the vote was cast.", "name": "get_votes_states", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, "get_votes_contestant_numbers": {"description": "Lookup data votes_contestant_number: Identifier for the contestant who received the vote.", "name": "get_votes_contestant_numbers", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, "get_votes_createds": {"description": "Lookup data votes_created: Timestamp indicating when the vote was recorded.", "name": "get_votes_createds", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}}, "data": [{"query": "SELECT COUNT(*) FROM area_code_state", "input": "How many states are there?", "gold_answer": 305, "output": [{"name": "compute_data_count", "arguments": {"data_source": "$starting_table_var$", "key_name": "", "distinct": false}, "label": "COUNT"}], "tools": [{"description": "Group data by values of a specified key", "name": "group_data_by", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to group by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_descending", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}}, {"description": "Lookup data state: This column contains the two-letter abbreviations for the states corresponding to the area codes.", "name": "get_states", "arguments": {}}, {"description": "Return the maximum value from a list.", "name": "compute_data_max", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the first `n` elements of a list-like object.", "name": "truncate", "arguments": {"truncate_array": {"description": "A list-like object.", "schema": {"type": "object"}}, "n": {"description": "The number of rows/elements to return.", "schema": {"type": "integer"}}}}, {"description": "Return the sum of values in a list.", "name": "compute_data_sum", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Filters rows where the column's value is less than the given value.", "name": "select_data_less_than", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Return the number of elements in a list.", "name": "compute_data_count", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_ascending", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}}, {"description": "Return the minimum value from a list.", "name": "compute_data_min", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Filters rows where the column's value is less than or equal to the given value.", "name": "select_data_less_than_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Return the standard deviation of values in a list.", "name": "compute_data_std", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the index of the maximum value in a list.", "name": "compute_data_argmax", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the mean of values in a list.", "name": "compute_data_mean", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the index of the minimum value in a list.", "name": "compute_data_argmin", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Lookup data area_code: This column contains three-digit area codes for various regions.", "name": "get_area_codes", "arguments": {}}, {"description": "Return only the distinct elements from the input list.", "name": "select_unique_values", "arguments": {"unique_array": {"description": "A list of input data", "schema": {"type": "array"}}}}, {"description": "Transform list of string values by taking substrings", "name": "transform_data_to_substring", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of string valued key to transform: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "start_index": {"description": "start of substring", "schema": {"type": "integer"}}, "end_index": {"description": "end of substring, must be >= start_index", "schema": {"type": "integer"}}}}, {"description": "Filters rows where the column's value is greater than or equal to the given value.", "name": "select_data_greater_than_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value contains the given value (applies to strings).", "name": "select_data_contains", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value matches a regex pattern (applies to strings).", "name": "select_data_like", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is equal to the given value.", "name": "select_data_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is not equal to the given value.", "name": "select_data_not_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is greater than the given value.", "name": "select_data_greater_than", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}], "dataset_name": "voter_1", "sample_id": 0, "key_values_and_descriptions": [{"key_name": "area_code", "description": "This column contains three-digit area codes for various regions.", "dtype": "number"}, {"key_name": "state", "description": "This column contains the two-letter abbreviations for the states corresponding to the area codes.", "dtype": "string"}], "initialization_step": {"name": "initialize_active_data", "arguments": {"condition_sequence": [], "alias_to_table_dict": {"": {"original_table_name": "area_code_state", "modified_table_name": "area_code_state"}}, "database_path": "/home/belder/invocable-api-hub/invocable_api_hub/driver/../../db_sparc/cache/voter_1.sqlite"}, "label": "starting_table_var"}}, {"query": "SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC", "input": "List the contestant numbers and names, ordered by contestant name descending.", "gold_answer": [[2, 8, 11, 9, 3, 6, 4, 10, 1, 7, 5], ["Tabatha Gehling", "Nita Coster", "Loraine NygrenTania Mattioli", "Kurt Walser", "Kelly Clauss", "Jessie Eichman", "Jessie Alloway", "Ericka Dieter", "Edwina Burnam", "Allie Rogalski", "Alana Bregman"]], "output": [{"name": "sort_data_descending", "arguments": {"data_source": "$starting_table_var$", "key_name": "contestant_name"}, "label": "SORTED_DF"}, {"name": "get_contestant_numbers", "arguments": {"data_source": "$SORTED_DF$"}, "label": "SELECT_COL_0"}, {"name": "get_contestant_names", "arguments": {"data_source": "$SORTED_DF$"}, "label": "SELECT_COL_1"}], "tools": [{"description": "Group data by values of a specified key", "name": "group_data_by", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to group by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_descending", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}}, {"description": "Return the maximum value from a list.", "name": "compute_data_max", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the first `n` elements of a list-like object.", "name": "truncate", "arguments": {"truncate_array": {"description": "A list-like object.", "schema": {"type": "object"}}, "n": {"description": "The number of rows/elements to return.", "schema": {"type": "integer"}}}}, {"description": "Return the sum of values in a list.", "name": "compute_data_sum", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Filters rows where the column's value is less than the given value.", "name": "select_data_less_than", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Return the number of elements in a list.", "name": "compute_data_count", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_ascending", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}}, {"description": "Lookup data contestant_name: The full name of each contestant.", "name": "get_contestant_names", "arguments": {}}, {"description": "Return the minimum value from a list.", "name": "compute_data_min", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Filters rows where the column's value is less than or equal to the given value.", "name": "select_data_less_than_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Return the standard deviation of values in a list.", "name": "compute_data_std", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the index of the maximum value in a list.", "name": "compute_data_argmax", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the mean of values in a list.", "name": "compute_data_mean", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the index of the minimum value in a list.", "name": "compute_data_argmin", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return only the distinct elements from the input list.", "name": "select_unique_values", "arguments": {"unique_array": {"description": "A list of input data", "schema": {"type": "array"}}}}, {"description": "Transform list of string values by taking substrings", "name": "transform_data_to_substring", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of string valued key to transform: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "start_index": {"description": "start of substring", "schema": {"type": "integer"}}, "end_index": {"description": "end of substring, must be >= start_index", "schema": {"type": "integer"}}}}, {"description": "Filters rows where the column's value is greater than or equal to the given value.", "name": "select_data_greater_than_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Lookup data contestant_number: A unique identifier assigned to each contestant.", "name": "get_contestant_numbers", "arguments": {}}, {"description": "Filters rows where the column's value contains the given value (applies to strings).", "name": "select_data_contains", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value matches a regex pattern (applies to strings).", "name": "select_data_like", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is equal to the given value.", "name": "select_data_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is not equal to the given value.", "name": "select_data_not_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is greater than the given value.", "name": "select_data_greater_than", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}], "dataset_name": "voter_1", "sample_id": 1, "key_values_and_descriptions": [{"key_name": "contestant_number", "description": "A unique identifier assigned to each contestant.", "dtype": "number"}, {"key_name": "contestant_name", "description": "The full name of each contestant.", "dtype": "string"}], "initialization_step": {"name": "initialize_active_data", "arguments": {"condition_sequence": [], "alias_to_table_dict": {"": {"original_table_name": "contestants", "modified_table_name": "contestants"}}, "database_path": "/home/belder/invocable-api-hub/invocable_api_hub/driver/../../db_sparc/cache/voter_1.sqlite"}, "label": "starting_table_var"}}, {"query": "SELECT vote_id, phone_number, state FROM votes", "input": "List the vote ids, phone numbers and states of all votes.", "gold_answer": [[1, 2, 3, 5], [7182887233, 7148407040, 6209222712, 5112677315], ["NY", "NY", "CA", "NJ\n"]], "output": [{"name": "get_vote_ids", "arguments": {"data_source": "$starting_table_var$"}, "label": "SELECT_COL_0"}, {"name": "get_phone_numbers", "arguments": {"data_source": "$starting_table_var$"}, "label": "SELECT_COL_1"}, {"name": "get_states", "arguments": {"data_source": "$starting_table_var$"}, "label": "SELECT_COL_2"}], "tools": [{"description": "Group data by values of a specified key", "name": "group_data_by", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to group by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_descending", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}}, {"description": "Lookup data state: This column contains the two-letter abbreviations for the states corresponding to the area codes.", "name": "get_states", "arguments": {}}, {"description": "Return the maximum value from a list.", "name": "compute_data_max", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the first `n` elements of a list-like object.", "name": "truncate", "arguments": {"truncate_array": {"description": "A list-like object.", "schema": {"type": "object"}}, "n": {"description": "The number of rows/elements to return.", "schema": {"type": "integer"}}}}, {"description": "Return the sum of values in a list.", "name": "compute_data_sum", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Filters rows where the column's value is less than the given value.", "name": "select_data_less_than", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Return the number of elements in a list.", "name": "compute_data_count", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_ascending", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}}, {"description": "Return the minimum value from a list.", "name": "compute_data_min", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Filters rows where the column's value is less than or equal to the given value.", "name": "select_data_less_than_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Return the standard deviation of values in a list.", "name": "compute_data_std", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the index of the maximum value in a list.", "name": "compute_data_argmax", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the mean of values in a list.", "name": "compute_data_mean", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the index of the minimum value in a list.", "name": "compute_data_argmin", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return only the distinct elements from the input list.", "name": "select_unique_values", "arguments": {"unique_array": {"description": "A list of input data", "schema": {"type": "array"}}}}, {"description": "Lookup data vote_id: Unique identifier for each vote record.", "name": "get_vote_ids", "arguments": {}}, {"description": "Transform list of string values by taking substrings", "name": "transform_data_to_substring", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of string valued key to transform: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "start_index": {"description": "start of substring", "schema": {"type": "integer"}}, "end_index": {"description": "end of substring, must be >= start_index", "schema": {"type": "integer"}}}}, {"description": "Filters rows where the column's value is greater than or equal to the given value.", "name": "select_data_greater_than_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Lookup data contestant_number: A unique identifier assigned to each contestant.", "name": "get_contestant_numbers", "arguments": {}}, {"description": "Filters rows where the column's value contains the given value (applies to strings).", "name": "select_data_contains", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value matches a regex pattern (applies to strings).", "name": "select_data_like", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Lookup data phone_number: Phone number associated with the vote.", "name": "get_phone_numbers", "arguments": {}}, {"description": "Lookup data created: Timestamp indicating when the vote was recorded.", "name": "get_createds", "arguments": {}}, {"description": "Filters rows where the column's value is equal to the given value.", "name": "select_data_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is not equal to the given value.", "name": "select_data_not_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is greater than the given value.", "name": "select_data_greater_than", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}], "dataset_name": "voter_1", "sample_id": 2, "key_values_and_descriptions": [{"key_name": "vote_id", "description": "Unique identifier for each vote record.", "dtype": "number"}, {"key_name": "phone_number", "description": "Phone number associated with the vote.", "dtype": "number"}, {"key_name": "state", "description": "State from which the vote was cast.", "dtype": "string"}, {"key_name": "contestant_number", "description": "Identifier for the contestant who received the vote.", "dtype": "number"}, {"key_name": "created", "description": "Timestamp indicating when the vote was recorded.", "dtype": "object"}], "initialization_step": {"name": "initialize_active_data", "arguments": {"condition_sequence": [], "alias_to_table_dict": {"": {"original_table_name": "votes", "modified_table_name": "votes"}}, "database_path": "/home/belder/invocable-api-hub/invocable_api_hub/driver/../../db_sparc/cache/voter_1.sqlite"}, "label": "starting_table_var"}}, {"query": "SELECT MAX(area_code), MIN(area_code) FROM area_code_state", "input": "What are the maximum and minimum values of area codes?", "gold_answer": [989, 201], "output": [{"name": "compute_data_max", "arguments": {"data_source": "$starting_table_var$", "key_name": "area_code", "distinct": false}, "label": "MAX"}, {"name": "compute_data_min", "arguments": {"data_source": "$starting_table_var$", "key_name": "area_code", "distinct": false}, "label": "MIN"}], "tools": [{"description": "Group data by values of a specified key", "name": "group_data_by", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to group by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_descending", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}}, {"description": "Lookup data state: This column contains the two-letter abbreviations for the states corresponding to the area codes.", "name": "get_states", "arguments": {}}, {"description": "Return the maximum value from a list.", "name": "compute_data_max", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the first `n` elements of a list-like object.", "name": "truncate", "arguments": {"truncate_array": {"description": "A list-like object.", "schema": {"type": "object"}}, "n": {"description": "The number of rows/elements to return.", "schema": {"type": "integer"}}}}, {"description": "Return the sum of values in a list.", "name": "compute_data_sum", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Filters rows where the column's value is less than the given value.", "name": "select_data_less_than", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Return the number of elements in a list.", "name": "compute_data_count", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_ascending", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}}, {"description": "Return the minimum value from a list.", "name": "compute_data_min", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Filters rows where the column's value is less than or equal to the given value.", "name": "select_data_less_than_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Return the standard deviation of values in a list.", "name": "compute_data_std", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the index of the maximum value in a list.", "name": "compute_data_argmax", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the mean of values in a list.", "name": "compute_data_mean", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the index of the minimum value in a list.", "name": "compute_data_argmin", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Lookup data area_code: This column contains three-digit area codes for various regions.", "name": "get_area_codes", "arguments": {}}, {"description": "Return only the distinct elements from the input list.", "name": "select_unique_values", "arguments": {"unique_array": {"description": "A list of input data", "schema": {"type": "array"}}}}, {"description": "Transform list of string values by taking substrings", "name": "transform_data_to_substring", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of string valued key to transform: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "start_index": {"description": "start of substring", "schema": {"type": "integer"}}, "end_index": {"description": "end of substring, must be >= start_index", "schema": {"type": "integer"}}}}, {"description": "Filters rows where the column's value is greater than or equal to the given value.", "name": "select_data_greater_than_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value contains the given value (applies to strings).", "name": "select_data_contains", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value matches a regex pattern (applies to strings).", "name": "select_data_like", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is equal to the given value.", "name": "select_data_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is not equal to the given value.", "name": "select_data_not_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is greater than the given value.", "name": "select_data_greater_than", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}], "dataset_name": "voter_1", "sample_id": 3, "key_values_and_descriptions": [{"key_name": "area_code", "description": "This column contains three-digit area codes for various regions.", "dtype": "number"}, {"key_name": "state", "description": "This column contains the two-letter abbreviations for the states corresponding to the area codes.", "dtype": "string"}], "initialization_step": {"name": "initialize_active_data", "arguments": {"condition_sequence": [], "alias_to_table_dict": {"": {"original_table_name": "area_code_state", "modified_table_name": "area_code_state"}}, "database_path": "/home/belder/invocable-api-hub/invocable_api_hub/driver/../../db_sparc/cache/voter_1.sqlite"}, "label": "starting_table_var"}}, {"query": "SELECT T2.created, T2.state, T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'", "input": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "gold_answer": ["2018-03-09 19:03:21", "NY", 7182887233], "output": [{"name": "select_data_equal_to", "arguments": {"data_source": "$starting_table_var$", "key_name": "contestants_contestant_name", "value": "Tabatha Gehling"}, "label": "FILTERED_DF_0"}, {"name": "get_votes_createds", "arguments": {"data_source": "$FILTERED_DF_0$"}, "label": "SELECT_COL_0"}, {"name": "get_votes_states", "arguments": {"data_source": "$FILTERED_DF_0$"}, "label": "SELECT_COL_1"}, {"name": "get_votes_phone_numbers", "arguments": {"data_source": "$FILTERED_DF_0$"}, "label": "SELECT_COL_2"}], "tools": [{"description": "Group data by values of a specified key", "name": "group_data_by", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to group by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_descending", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}}, {"description": "Return the maximum value from a list.", "name": "compute_data_max", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the first `n` elements of a list-like object.", "name": "truncate", "arguments": {"truncate_array": {"description": "A list-like object.", "schema": {"type": "object"}}, "n": {"description": "The number of rows/elements to return.", "schema": {"type": "integer"}}}}, {"description": "Return the sum of values in a list.", "name": "compute_data_sum", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Lookup data contestants_contestant_name: The full name of each contestant.", "name": "get_contestants_contestant_names", "arguments": {}}, {"description": "Filters rows where the column's value is less than the given value.", "name": "select_data_less_than", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Return the number of elements in a list.", "name": "compute_data_count", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_ascending", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}}, {"description": "Lookup data votes_created: Timestamp indicating when the vote was recorded.", "name": "get_votes_createds", "arguments": {}}, {"description": "Return the minimum value from a list.", "name": "compute_data_min", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Filters rows where the column's value is less than or equal to the given value.", "name": "select_data_less_than_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Return the standard deviation of values in a list.", "name": "compute_data_std", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the index of the maximum value in a list.", "name": "compute_data_argmax", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Lookup data votes_phone_number: Phone number associated with the vote.", "name": "get_votes_phone_numbers", "arguments": {}}, {"description": "Return the mean of values in a list.", "name": "compute_data_mean", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return the index of the minimum value in a list.", "name": "compute_data_argmin", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}}, {"description": "Return only the distinct elements from the input list.", "name": "select_unique_values", "arguments": {"unique_array": {"description": "A list of input data", "schema": {"type": "array"}}}}, {"description": "Lookup data votes_state: State from which the vote was cast.", "name": "get_votes_states", "arguments": {}}, {"description": "Lookup data votes_contestant_number: Identifier for the contestant who received the vote.", "name": "get_votes_contestant_numbers", "arguments": {}}, {"description": "Transform list of string values by taking substrings", "name": "transform_data_to_substring", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of string valued key to transform: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "start_index": {"description": "start of substring", "schema": {"type": "integer"}}, "end_index": {"description": "end of substring, must be >= start_index", "schema": {"type": "integer"}}}}, {"description": "Lookup data contestants_contestant_number: A unique identifier assigned to each contestant.", "name": "get_contestants_contestant_numbers", "arguments": {}}, {"description": "Filters rows where the column's value is greater than or equal to the given value.", "name": "select_data_greater_than_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value contains the given value (applies to strings).", "name": "select_data_contains", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value matches a regex pattern (applies to strings).", "name": "select_data_like", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is equal to the given value.", "name": "select_data_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is not equal to the given value.", "name": "select_data_not_equal_to", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Filters rows where the column's value is greater than the given value.", "name": "select_data_greater_than", "arguments": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}}, {"description": "Lookup data votes_vote_id: Unique identifier for each vote record.", "name": "get_votes_vote_ids", "arguments": {}}], "dataset_name": "voter_1", "sample_id": 12, "key_values_and_descriptions": [{"key_name": "contestants_contestant_number", "description": "A unique identifier assigned to each contestant.", "dtype": "number"}, {"key_name": "contestants_contestant_name", "description": "The full name of each contestant.", "dtype": "string"}, {"key_name": "votes_vote_id", "description": "Unique identifier for each vote record.", "dtype": "number"}, {"key_name": "votes_phone_number", "description": "Phone number associated with the vote.", "dtype": "number"}, {"key_name": "votes_state", "description": "State from which the vote was cast.", "dtype": "string"}, {"key_name": "votes_contestant_number", "description": "Identifier for the contestant who received the vote.", "dtype": "number"}, {"key_name": "votes_created", "description": "Timestamp indicating when the vote was recorded.", "dtype": "object"}], "initialization_step": {"name": "initialize_active_data", "arguments": {"condition_sequence": [["T1.contestant_number", "T2.contestant_number", ""]], "alias_to_table_dict": {"T1": {"original_table_name": "contestants", "modified_table_name": "contestants"}, "T2": {"original_table_name": "votes", "modified_table_name": "votes"}}, "database_path": "/home/belder/invocable-api-hub/invocable_api_hub/driver/../../db_sparc/cache/voter_1.sqlite"}, "label": "starting_table_var"}}], "agent_data": [{"query": "SELECT COUNT(*) FROM area_code_state", "input": "How many states are there?", "gold_answer": 305, "output": [{"name": "initialize_active_data", "arguments": {"condition_sequence": [], "alias_to_table_dict": {"": {"original_table_name": "area_code_state", "modified_table_name": "area_code_state"}}, "database_path": "/home/belder/invocable-api-hub/invocable_api_hub/driver/../../db_sparc/cache/voter_1.sqlite"}, "label": "starting_table_var"}, {"name": "compute_data_count", "arguments": {"data_source": "$starting_table_var$", "key_name": "", "distinct": false}, "label": "COUNT"}], "tools": [{"description": "Group data by values of a specified key", "name": "group_data_by", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to group by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}}, "required": ["data_source", "key_name"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data with additional layer of keys given by unique values in the column given by `key_name`", "type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_descending", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}, "required": ["data_source", "key_name", "ascending"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data sorted by chosen key", "type": "string"}}}}, {"description": "Lookup data state: This column contains the two-letter abbreviations for the states corresponding to the area codes.", "name": "get_states", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Return the maximum value from a list.", "name": "compute_data_max", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the maximum value in the input data.", "type": "string"}}}}, {"description": "Return the first `n` elements of a list-like object.", "name": "truncate", "parameters": {"properties": {"truncate_array": {"description": "A list-like object.", "schema": {"type": "object"}}, "n": {"description": "The number of rows/elements to return.", "schema": {"type": "integer"}}}, "required": ["truncate_array", "n"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The first `n` elements of the list-like object.", "type": "array"}}}}, {"description": "Return the sum of values in a list.", "name": "compute_data_sum", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the sum of the input data.", "type": "string"}}}}, {"description": "Filters rows where the column's value is less than the given value.", "name": "select_data_less_than", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Return the number of elements in a list.", "name": "compute_data_count", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the number of elements in the input data.", "type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_ascending", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}, "required": ["data_source", "key_name", "ascending"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data sorted by chosen key", "type": "string"}}}}, {"description": "Initializes active data based on the provided condition sequence, alias-to-table mapping, and database path.  This function checks the validity of the database file at the specified path and raises an exception if the file is not found. After validating the database path, the function processes the condition sequence and alias-to-table dictionary to return a dictionary of active data.", "name": "initialize_active_data", "parameters": {"properties": {"condition_sequence": {"description": "A list of conditions (joins) to be processed for initializing the data.", "schema": {"type": "array"}}, "alias_to_table_dict": {"description": "A dictionary mapping aliases to their respective tables.", "schema": {"type": "object"}}, "database_path": {"description": "The file path to the database that will be used for the initialization.", "schema": {"type": "string"}}}, "required": ["condition_sequence", "alias_to_table_dict", "database_path"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a dictionary representing the initialized active data based on the conditions and table mappings.", "type": "string"}}}}, {"description": "Return the minimum value from a list.", "name": "compute_data_min", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the minimum value in the input data.", "type": "string"}}}}, {"description": "Filters rows where the column's value is less than or equal to the given value.", "name": "select_data_less_than_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Return the standard deviation of values in a list.", "name": "compute_data_std", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the standard deviation of the input data.", "type": "string"}}}}, {"description": "Return the index of the maximum value in a list.", "name": "compute_data_argmax", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the index of the maximum value in the input data.", "type": "string"}}}}, {"description": "Return the mean of values in a list.", "name": "compute_data_mean", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the mean of the input data.", "type": "string"}}}}, {"description": "Return the index of the minimum value in a list.", "name": "compute_data_argmin", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the index of the minimum value in the input data.", "type": "string"}}}}, {"description": "Lookup data area_code: This column contains three-digit area codes for various regions.", "name": "get_area_codes", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Return only the distinct elements from the input list.", "name": "select_unique_values", "parameters": {"properties": {"unique_array": {"description": "A list of input data", "schema": {"type": "array"}}}, "required": ["unique_array"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The distinct elements of the input list", "type": "array"}}}}, {"description": "Transform list of string values by taking substrings", "name": "transform_data_to_substring", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of string valued key to transform: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "start_index": {"description": "start of substring", "schema": {"type": "integer"}}, "end_index": {"description": "end of substring, must be >= start_index", "schema": {"type": "integer"}}}, "required": ["data_source", "key_name", "start_index", "end_index"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  original table (dict) with the specified key values transformed", "type": "string"}}}}, {"description": "Filters rows where the column's value is greater than or equal to the given value.", "name": "select_data_greater_than_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value contains the given value (applies to strings).", "name": "select_data_contains", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value matches a regex pattern (applies to strings).", "name": "select_data_like", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is equal to the given value.", "name": "select_data_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is not equal to the given value.", "name": "select_data_not_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is greater than the given value.", "name": "select_data_greater_than", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}], "dataset_name": "voter_1", "sample_id": 0, "key_values_and_descriptions": [{"key_name": "area_code", "description": "This column contains three-digit area codes for various regions.", "dtype": "number"}, {"key_name": "state", "description": "This column contains the two-letter abbreviations for the states corresponding to the area codes.", "dtype": "string"}]}, {"query": "SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC", "input": "List the contestant numbers and names, ordered by contestant name descending.", "gold_answer": [[2, 8, 11, 9, 3, 6, 4, 10, 1, 7, 5], ["Tabatha Gehling", "Nita Coster", "Loraine NygrenTania Mattioli", "Kurt Walser", "Kelly Clauss", "Jessie Eichman", "Jessie Alloway", "Ericka Dieter", "Edwina Burnam", "Allie Rogalski", "Alana Bregman"]], "output": [{"name": "initialize_active_data", "arguments": {"condition_sequence": [], "alias_to_table_dict": {"": {"original_table_name": "contestants", "modified_table_name": "contestants"}}, "database_path": "/home/belder/invocable-api-hub/invocable_api_hub/driver/../../db_sparc/cache/voter_1.sqlite"}, "label": "starting_table_var"}, {"name": "sort_data_descending", "arguments": {"data_source": "$starting_table_var$", "key_name": "contestant_name"}, "label": "SORTED_DF"}, {"name": "get_contestant_numbers", "arguments": {"data_source": "$SORTED_DF$"}, "label": "SELECT_COL_0"}, {"name": "get_contestant_names", "arguments": {"data_source": "$SORTED_DF$"}, "label": "SELECT_COL_1"}], "tools": [{"description": "Group data by values of a specified key", "name": "group_data_by", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to group by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}}, "required": ["data_source", "key_name"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data with additional layer of keys given by unique values in the column given by `key_name`", "type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_descending", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}, "required": ["data_source", "key_name", "ascending"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data sorted by chosen key", "type": "string"}}}}, {"description": "Return the maximum value from a list.", "name": "compute_data_max", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the maximum value in the input data.", "type": "string"}}}}, {"description": "Return the first `n` elements of a list-like object.", "name": "truncate", "parameters": {"properties": {"truncate_array": {"description": "A list-like object.", "schema": {"type": "object"}}, "n": {"description": "The number of rows/elements to return.", "schema": {"type": "integer"}}}, "required": ["truncate_array", "n"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The first `n` elements of the list-like object.", "type": "array"}}}}, {"description": "Return the sum of values in a list.", "name": "compute_data_sum", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the sum of the input data.", "type": "string"}}}}, {"description": "Filters rows where the column's value is less than the given value.", "name": "select_data_less_than", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Return the number of elements in a list.", "name": "compute_data_count", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the number of elements in the input data.", "type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_ascending", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}, "required": ["data_source", "key_name", "ascending"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data sorted by chosen key", "type": "string"}}}}, {"description": "Initializes active data based on the provided condition sequence, alias-to-table mapping, and database path.  This function checks the validity of the database file at the specified path and raises an exception if the file is not found. After validating the database path, the function processes the condition sequence and alias-to-table dictionary to return a dictionary of active data.", "name": "initialize_active_data", "parameters": {"properties": {"condition_sequence": {"description": "A list of conditions (joins) to be processed for initializing the data.", "schema": {"type": "array"}}, "alias_to_table_dict": {"description": "A dictionary mapping aliases to their respective tables.", "schema": {"type": "object"}}, "database_path": {"description": "The file path to the database that will be used for the initialization.", "schema": {"type": "string"}}}, "required": ["condition_sequence", "alias_to_table_dict", "database_path"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a dictionary representing the initialized active data based on the conditions and table mappings.", "type": "string"}}}}, {"description": "Lookup data contestant_name: The full name of each contestant.", "name": "get_contestant_names", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Return the minimum value from a list.", "name": "compute_data_min", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the minimum value in the input data.", "type": "string"}}}}, {"description": "Filters rows where the column's value is less than or equal to the given value.", "name": "select_data_less_than_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Return the standard deviation of values in a list.", "name": "compute_data_std", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the standard deviation of the input data.", "type": "string"}}}}, {"description": "Return the index of the maximum value in a list.", "name": "compute_data_argmax", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the index of the maximum value in the input data.", "type": "string"}}}}, {"description": "Return the mean of values in a list.", "name": "compute_data_mean", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the mean of the input data.", "type": "string"}}}}, {"description": "Return the index of the minimum value in a list.", "name": "compute_data_argmin", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the index of the minimum value in the input data.", "type": "string"}}}}, {"description": "Return only the distinct elements from the input list.", "name": "select_unique_values", "parameters": {"properties": {"unique_array": {"description": "A list of input data", "schema": {"type": "array"}}}, "required": ["unique_array"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The distinct elements of the input list", "type": "array"}}}}, {"description": "Transform list of string values by taking substrings", "name": "transform_data_to_substring", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of string valued key to transform: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "start_index": {"description": "start of substring", "schema": {"type": "integer"}}, "end_index": {"description": "end of substring, must be >= start_index", "schema": {"type": "integer"}}}, "required": ["data_source", "key_name", "start_index", "end_index"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  original table (dict) with the specified key values transformed", "type": "string"}}}}, {"description": "Filters rows where the column's value is greater than or equal to the given value.", "name": "select_data_greater_than_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Lookup data contestant_number: A unique identifier assigned to each contestant.", "name": "get_contestant_numbers", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Filters rows where the column's value contains the given value (applies to strings).", "name": "select_data_contains", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value matches a regex pattern (applies to strings).", "name": "select_data_like", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is equal to the given value.", "name": "select_data_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is not equal to the given value.", "name": "select_data_not_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is greater than the given value.", "name": "select_data_greater_than", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}], "dataset_name": "voter_1", "sample_id": 1, "key_values_and_descriptions": [{"key_name": "contestant_number", "description": "A unique identifier assigned to each contestant.", "dtype": "number"}, {"key_name": "contestant_name", "description": "The full name of each contestant.", "dtype": "string"}]}, {"query": "SELECT vote_id, phone_number, state FROM votes", "input": "List the vote ids, phone numbers and states of all votes.", "gold_answer": [[1, 2, 3, 5], [7182887233, 7148407040, 6209222712, 5112677315], ["NY", "NY", "CA", "NJ\n"]], "output": [{"name": "initialize_active_data", "arguments": {"condition_sequence": [], "alias_to_table_dict": {"": {"original_table_name": "votes", "modified_table_name": "votes"}}, "database_path": "/home/belder/invocable-api-hub/invocable_api_hub/driver/../../db_sparc/cache/voter_1.sqlite"}, "label": "starting_table_var"}, {"name": "get_vote_ids", "arguments": {"data_source": "$starting_table_var$"}, "label": "SELECT_COL_0"}, {"name": "get_phone_numbers", "arguments": {"data_source": "$starting_table_var$"}, "label": "SELECT_COL_1"}, {"name": "get_states", "arguments": {"data_source": "$starting_table_var$"}, "label": "SELECT_COL_2"}], "tools": [{"description": "Group data by values of a specified key", "name": "group_data_by", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to group by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}}, "required": ["data_source", "key_name"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data with additional layer of keys given by unique values in the column given by `key_name`", "type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_descending", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}, "required": ["data_source", "key_name", "ascending"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data sorted by chosen key", "type": "string"}}}}, {"description": "Lookup data state: This column contains the two-letter abbreviations for the states corresponding to the area codes.", "name": "get_states", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Return the maximum value from a list.", "name": "compute_data_max", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the maximum value in the input data.", "type": "string"}}}}, {"description": "Return the first `n` elements of a list-like object.", "name": "truncate", "parameters": {"properties": {"truncate_array": {"description": "A list-like object.", "schema": {"type": "object"}}, "n": {"description": "The number of rows/elements to return.", "schema": {"type": "integer"}}}, "required": ["truncate_array", "n"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The first `n` elements of the list-like object.", "type": "array"}}}}, {"description": "Return the sum of values in a list.", "name": "compute_data_sum", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the sum of the input data.", "type": "string"}}}}, {"description": "Filters rows where the column's value is less than the given value.", "name": "select_data_less_than", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Return the number of elements in a list.", "name": "compute_data_count", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the number of elements in the input data.", "type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_ascending", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}, "required": ["data_source", "key_name", "ascending"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data sorted by chosen key", "type": "string"}}}}, {"description": "Initializes active data based on the provided condition sequence, alias-to-table mapping, and database path.  This function checks the validity of the database file at the specified path and raises an exception if the file is not found. After validating the database path, the function processes the condition sequence and alias-to-table dictionary to return a dictionary of active data.", "name": "initialize_active_data", "parameters": {"properties": {"condition_sequence": {"description": "A list of conditions (joins) to be processed for initializing the data.", "schema": {"type": "array"}}, "alias_to_table_dict": {"description": "A dictionary mapping aliases to their respective tables.", "schema": {"type": "object"}}, "database_path": {"description": "The file path to the database that will be used for the initialization.", "schema": {"type": "string"}}}, "required": ["condition_sequence", "alias_to_table_dict", "database_path"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a dictionary representing the initialized active data based on the conditions and table mappings.", "type": "string"}}}}, {"description": "Return the minimum value from a list.", "name": "compute_data_min", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the minimum value in the input data.", "type": "string"}}}}, {"description": "Filters rows where the column's value is less than or equal to the given value.", "name": "select_data_less_than_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Return the standard deviation of values in a list.", "name": "compute_data_std", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the standard deviation of the input data.", "type": "string"}}}}, {"description": "Return the index of the maximum value in a list.", "name": "compute_data_argmax", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the index of the maximum value in the input data.", "type": "string"}}}}, {"description": "Return the mean of values in a list.", "name": "compute_data_mean", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the mean of the input data.", "type": "string"}}}}, {"description": "Return the index of the minimum value in a list.", "name": "compute_data_argmin", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the index of the minimum value in the input data.", "type": "string"}}}}, {"description": "Return only the distinct elements from the input list.", "name": "select_unique_values", "parameters": {"properties": {"unique_array": {"description": "A list of input data", "schema": {"type": "array"}}}, "required": ["unique_array"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The distinct elements of the input list", "type": "array"}}}}, {"description": "Lookup data vote_id: Unique identifier for each vote record.", "name": "get_vote_ids", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Transform list of string values by taking substrings", "name": "transform_data_to_substring", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of string valued key to transform: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "start_index": {"description": "start of substring", "schema": {"type": "integer"}}, "end_index": {"description": "end of substring, must be >= start_index", "schema": {"type": "integer"}}}, "required": ["data_source", "key_name", "start_index", "end_index"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  original table (dict) with the specified key values transformed", "type": "string"}}}}, {"description": "Filters rows where the column's value is greater than or equal to the given value.", "name": "select_data_greater_than_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Lookup data contestant_number: A unique identifier assigned to each contestant.", "name": "get_contestant_numbers", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Filters rows where the column's value contains the given value (applies to strings).", "name": "select_data_contains", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value matches a regex pattern (applies to strings).", "name": "select_data_like", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Lookup data phone_number: Phone number associated with the vote.", "name": "get_phone_numbers", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Lookup data created: Timestamp indicating when the vote was recorded.", "name": "get_createds", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Filters rows where the column's value is equal to the given value.", "name": "select_data_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is not equal to the given value.", "name": "select_data_not_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is greater than the given value.", "name": "select_data_greater_than", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}], "dataset_name": "voter_1", "sample_id": 2, "key_values_and_descriptions": [{"key_name": "vote_id", "description": "Unique identifier for each vote record.", "dtype": "number"}, {"key_name": "phone_number", "description": "Phone number associated with the vote.", "dtype": "number"}, {"key_name": "state", "description": "State from which the vote was cast.", "dtype": "string"}, {"key_name": "contestant_number", "description": "Identifier for the contestant who received the vote.", "dtype": "number"}, {"key_name": "created", "description": "Timestamp indicating when the vote was recorded.", "dtype": "object"}]}, {"query": "SELECT MAX(area_code), MIN(area_code) FROM area_code_state", "input": "What are the maximum and minimum values of area codes?", "gold_answer": [989, 201], "output": [{"name": "initialize_active_data", "arguments": {"condition_sequence": [], "alias_to_table_dict": {"": {"original_table_name": "area_code_state", "modified_table_name": "area_code_state"}}, "database_path": "/home/belder/invocable-api-hub/invocable_api_hub/driver/../../db_sparc/cache/voter_1.sqlite"}, "label": "starting_table_var"}, {"name": "compute_data_max", "arguments": {"data_source": "$starting_table_var$", "key_name": "area_code", "distinct": false}, "label": "MAX"}, {"name": "compute_data_min", "arguments": {"data_source": "$starting_table_var$", "key_name": "area_code", "distinct": false}, "label": "MIN"}], "tools": [{"description": "Group data by values of a specified key", "name": "group_data_by", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to group by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}}, "required": ["data_source", "key_name"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data with additional layer of keys given by unique values in the column given by `key_name`", "type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_descending", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}, "required": ["data_source", "key_name", "ascending"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data sorted by chosen key", "type": "string"}}}}, {"description": "Lookup data state: This column contains the two-letter abbreviations for the states corresponding to the area codes.", "name": "get_states", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Return the maximum value from a list.", "name": "compute_data_max", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the maximum value in the input data.", "type": "string"}}}}, {"description": "Return the first `n` elements of a list-like object.", "name": "truncate", "parameters": {"properties": {"truncate_array": {"description": "A list-like object.", "schema": {"type": "object"}}, "n": {"description": "The number of rows/elements to return.", "schema": {"type": "integer"}}}, "required": ["truncate_array", "n"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The first `n` elements of the list-like object.", "type": "array"}}}}, {"description": "Return the sum of values in a list.", "name": "compute_data_sum", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the sum of the input data.", "type": "string"}}}}, {"description": "Filters rows where the column's value is less than the given value.", "name": "select_data_less_than", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Return the number of elements in a list.", "name": "compute_data_count", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the number of elements in the input data.", "type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_ascending", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}, "required": ["data_source", "key_name", "ascending"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data sorted by chosen key", "type": "string"}}}}, {"description": "Initializes active data based on the provided condition sequence, alias-to-table mapping, and database path.  This function checks the validity of the database file at the specified path and raises an exception if the file is not found. After validating the database path, the function processes the condition sequence and alias-to-table dictionary to return a dictionary of active data.", "name": "initialize_active_data", "parameters": {"properties": {"condition_sequence": {"description": "A list of conditions (joins) to be processed for initializing the data.", "schema": {"type": "array"}}, "alias_to_table_dict": {"description": "A dictionary mapping aliases to their respective tables.", "schema": {"type": "object"}}, "database_path": {"description": "The file path to the database that will be used for the initialization.", "schema": {"type": "string"}}}, "required": ["condition_sequence", "alias_to_table_dict", "database_path"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a dictionary representing the initialized active data based on the conditions and table mappings.", "type": "string"}}}}, {"description": "Return the minimum value from a list.", "name": "compute_data_min", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the minimum value in the input data.", "type": "string"}}}}, {"description": "Filters rows where the column's value is less than or equal to the given value.", "name": "select_data_less_than_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Return the standard deviation of values in a list.", "name": "compute_data_std", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the standard deviation of the input data.", "type": "string"}}}}, {"description": "Return the index of the maximum value in a list.", "name": "compute_data_argmax", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the index of the maximum value in the input data.", "type": "string"}}}}, {"description": "Return the mean of values in a list.", "name": "compute_data_mean", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the mean of the input data.", "type": "string"}}}}, {"description": "Return the index of the minimum value in a list.", "name": "compute_data_argmin", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the index of the minimum value in the input data.", "type": "string"}}}}, {"description": "Lookup data area_code: This column contains three-digit area codes for various regions.", "name": "get_area_codes", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Return only the distinct elements from the input list.", "name": "select_unique_values", "parameters": {"properties": {"unique_array": {"description": "A list of input data", "schema": {"type": "array"}}}, "required": ["unique_array"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The distinct elements of the input list", "type": "array"}}}}, {"description": "Transform list of string values by taking substrings", "name": "transform_data_to_substring", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of string valued key to transform: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "start_index": {"description": "start of substring", "schema": {"type": "integer"}}, "end_index": {"description": "end of substring, must be >= start_index", "schema": {"type": "integer"}}}, "required": ["data_source", "key_name", "start_index", "end_index"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  original table (dict) with the specified key values transformed", "type": "string"}}}}, {"description": "Filters rows where the column's value is greater than or equal to the given value.", "name": "select_data_greater_than_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value contains the given value (applies to strings).", "name": "select_data_contains", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value matches a regex pattern (applies to strings).", "name": "select_data_like", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is equal to the given value.", "name": "select_data_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is not equal to the given value.", "name": "select_data_not_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is greater than the given value.", "name": "select_data_greater_than", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}], "dataset_name": "voter_1", "sample_id": 3, "key_values_and_descriptions": [{"key_name": "area_code", "description": "This column contains three-digit area codes for various regions.", "dtype": "number"}, {"key_name": "state", "description": "This column contains the two-letter abbreviations for the states corresponding to the area codes.", "dtype": "string"}]}, {"query": "SELECT T2.created, T2.state, T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'", "input": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "gold_answer": ["2018-03-09 19:03:21", "NY", 7182887233], "output": [{"name": "initialize_active_data", "arguments": {"condition_sequence": [["T1.contestant_number", "T2.contestant_number", ""]], "alias_to_table_dict": {"T1": {"original_table_name": "contestants", "modified_table_name": "contestants"}, "T2": {"original_table_name": "votes", "modified_table_name": "votes"}}, "database_path": "/home/belder/invocable-api-hub/invocable_api_hub/driver/../../db_sparc/cache/voter_1.sqlite"}, "label": "starting_table_var"}, {"name": "select_data_equal_to", "arguments": {"data_source": "$starting_table_var$", "key_name": "contestants_contestant_name", "value": "Tabatha Gehling"}, "label": "FILTERED_DF_0"}, {"name": "get_votes_createds", "arguments": {"data_source": "$FILTERED_DF_0$"}, "label": "SELECT_COL_0"}, {"name": "get_votes_states", "arguments": {"data_source": "$FILTERED_DF_0$"}, "label": "SELECT_COL_1"}, {"name": "get_votes_phone_numbers", "arguments": {"data_source": "$FILTERED_DF_0$"}, "label": "SELECT_COL_2"}], "tools": [{"description": "Group data by values of a specified key", "name": "group_data_by", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to group by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}}, "required": ["data_source", "key_name"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data with additional layer of keys given by unique values in the column given by `key_name`", "type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_descending", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}, "required": ["data_source", "key_name", "ascending"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data sorted by chosen key", "type": "string"}}}}, {"description": "Return the maximum value from a list.", "name": "compute_data_max", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the maximum value in the input data.", "type": "string"}}}}, {"description": "Return the first `n` elements of a list-like object.", "name": "truncate", "parameters": {"properties": {"truncate_array": {"description": "A list-like object.", "schema": {"type": "object"}}, "n": {"description": "The number of rows/elements to return.", "schema": {"type": "integer"}}}, "required": ["truncate_array", "n"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The first `n` elements of the list-like object.", "type": "array"}}}}, {"description": "Return the sum of values in a list.", "name": "compute_data_sum", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the sum of the input data.", "type": "string"}}}}, {"description": "Lookup data contestants_contestant_name: The full name of each contestant.", "name": "get_contestants_contestant_names", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Filters rows where the column's value is less than the given value.", "name": "select_data_less_than", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Return the number of elements in a list.", "name": "compute_data_count", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the number of elements in the input data.", "type": "string"}}}}, {"description": "Sort data by the values associated with the chosen key='key_name' If the input data is list-like, returns the sorted list. If the input data is tabular, returns the table with rows sorted by the values in column 'key_name'. If the data is grouped tables, then sort the groups by the value in 'key_name'", "name": "sort_data_ascending", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of key to sort by: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "ascending": {"description": "whether to sort by ascending order", "schema": {"type": "boolean"}}}, "required": ["data_source", "key_name", "ascending"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  data sorted by chosen key", "type": "string"}}}}, {"description": "Lookup data votes_created: Timestamp indicating when the vote was recorded.", "name": "get_votes_createds", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Initializes active data based on the provided condition sequence, alias-to-table mapping, and database path.  This function checks the validity of the database file at the specified path and raises an exception if the file is not found. After validating the database path, the function processes the condition sequence and alias-to-table dictionary to return a dictionary of active data.", "name": "initialize_active_data", "parameters": {"properties": {"condition_sequence": {"description": "A list of conditions (joins) to be processed for initializing the data.", "schema": {"type": "array"}}, "alias_to_table_dict": {"description": "A dictionary mapping aliases to their respective tables.", "schema": {"type": "object"}}, "database_path": {"description": "The file path to the database that will be used for the initialization.", "schema": {"type": "string"}}}, "required": ["condition_sequence", "alias_to_table_dict", "database_path"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a dictionary representing the initialized active data based on the conditions and table mappings.", "type": "string"}}}}, {"description": "Return the minimum value from a list.", "name": "compute_data_min", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the minimum value in the input data.", "type": "string"}}}}, {"description": "Filters rows where the column's value is less than or equal to the given value.", "name": "select_data_less_than_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Return the standard deviation of values in a list.", "name": "compute_data_std", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the standard deviation of the input data.", "type": "string"}}}}, {"description": "Return the index of the maximum value in a list.", "name": "compute_data_argmax", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the index of the maximum value in the input data.", "type": "string"}}}}, {"description": "Lookup data votes_phone_number: Phone number associated with the vote.", "name": "get_votes_phone_numbers", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Return the mean of values in a list.", "name": "compute_data_mean", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the mean of the input data.", "type": "string"}}}}, {"description": "Return the index of the minimum value in a list.", "name": "compute_data_argmin", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}}, "required": ["data_source"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  the index of the minimum value in the input data.", "type": "string"}}}}, {"description": "Return only the distinct elements from the input list.", "name": "select_unique_values", "parameters": {"properties": {"unique_array": {"description": "A list of input data", "schema": {"type": "array"}}}, "required": ["unique_array"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The distinct elements of the input list", "type": "array"}}}}, {"description": "Lookup data votes_state: State from which the vote was cast.", "name": "get_votes_states", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Lookup data votes_contestant_number: Identifier for the contestant who received the vote.", "name": "get_votes_contestant_numbers", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Transform list of string values by taking substrings", "name": "transform_data_to_substring", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "name of string valued key to transform: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "start_index": {"description": "start of substring", "schema": {"type": "integer"}}, "end_index": {"description": "end of substring, must be >= start_index", "schema": {"type": "integer"}}}, "required": ["data_source", "key_name", "start_index", "end_index"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  original table (dict) with the specified key values transformed", "type": "string"}}}}, {"description": "Lookup data contestants_contestant_number: A unique identifier assigned to each contestant.", "name": "get_contestants_contestant_numbers", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}, {"description": "Filters rows where the column's value is greater than or equal to the given value.", "name": "select_data_greater_than_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value contains the given value (applies to strings).", "name": "select_data_contains", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value matches a regex pattern (applies to strings).", "name": "select_data_like", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is equal to the given value.", "name": "select_data_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is not equal to the given value.", "name": "select_data_not_equal_to", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Filters rows where the column's value is greater than the given value.", "name": "select_data_greater_than", "parameters": {"properties": {"data_source": {"description": "The location of the data file in csv format.", "schema": {"type": "string"}}, "key_name": {"description": "The key on which the filter will be applied.: \n* `area_code` - This column contains three-digit area codes for various regions.\n* `state` - This column contains the two-letter abbreviations for the states corresponding to the area codes.\n", "schema": {"type": "string", "enum": ["area_code", "state"]}}, "value": {"description": "The value to compare against in the filtering operation.", "schema": {"type": "object"}}}, "required": ["data_source", "key_name", "value"], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "The path to a csv file containing  a new table (dict) containing the rows from the input data that meet the specified condition.", "type": "string"}}}}, {"description": "Lookup data votes_vote_id: Unique identifier for each vote record.", "name": "get_votes_vote_ids", "parameters": {"properties": {}, "required": [], "type": "object"}, "output_parameters": {"properties": {"output_0": {"description": "", "type": "object"}}}}], "dataset_name": "voter_1", "sample_id": 12, "key_values_and_descriptions": [{"key_name": "contestants_contestant_number", "description": "A unique identifier assigned to each contestant.", "dtype": "number"}, {"key_name": "contestants_contestant_name", "description": "The full name of each contestant.", "dtype": "string"}, {"key_name": "votes_vote_id", "description": "Unique identifier for each vote record.", "dtype": "number"}, {"key_name": "votes_phone_number", "description": "Phone number associated with the vote.", "dtype": "number"}, {"key_name": "votes_state", "description": "State from which the vote was cast.", "dtype": "string"}, {"key_name": "votes_contestant_number", "description": "Identifier for the contestant who received the vote.", "dtype": "number"}, {"key_name": "votes_created", "description": "Timestamp indicating when the vote was recorded.", "dtype": "object"}]}], "dataset": "voter_1"}