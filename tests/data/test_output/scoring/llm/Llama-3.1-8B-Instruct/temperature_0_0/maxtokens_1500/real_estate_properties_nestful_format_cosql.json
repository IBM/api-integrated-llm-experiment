{
  "confusion_metrix_matrics_micro": {
    "intent_set_metrics": {
      "accuracy": 1.0,
      "precision": 1.0,
      "recall": 1.0,
      "f1": 1.0,
      "confusion_matrix": {
        "true_positive": 2,
        "false_positive": 0,
        "true_negative": 0,
        "false_negative": 0,
        "mode": "set",
        "num_non_zero_gold": 2,
        "num_is_covered": 2
      }
    },
    "intent_counter_metrics": {
      "accuracy": 1.0,
      "precision": 1.0,
      "recall": 1.0,
      "f1": 1.0,
      "confusion_matrix": {
        "true_positive": 2,
        "false_positive": 0,
        "true_negative": 0,
        "false_negative": 0,
        "mode": "counter",
        "num_non_zero_gold": 2,
        "num_is_covered": 2
      }
    },
    "intent_list_metrics": {
      "accuracy": 1.0,
      "precision": 1.0,
      "recall": 1.0,
      "f1": 1.0,
      "confusion_matrix": {
        "true_positive": 2,
        "false_positive": 0,
        "true_negative": 0,
        "false_negative": 0,
        "mode": "list",
        "num_non_zero_gold": 2,
        "num_is_covered": 2
      }
    },
    "slot_set_metrics": {
      "accuracy": 0.5,
      "precision": 0.6666666666666666,
      "recall": 0.6666666666666666,
      "f1": 0.6666666666666666,
      "confusion_matrix": {
        "true_positive": 2,
        "false_positive": 1,
        "true_negative": 0,
        "false_negative": 1,
        "mode": "set",
        "num_non_zero_gold": 2,
        "num_is_covered": 1
      }
    }
  },
  "confusion_metrix_matrics_micro_model_by_output_length": {
    "intent_set_metrics": {
      "1": {
        "accuracy": 1.0,
        "precision": 1.0,
        "recall": 1.0,
        "f1": 1.0,
        "confusion_matrix": {
          "true_positive": 2,
          "false_positive": 0,
          "true_negative": 0,
          "false_negative": 0,
          "mode": "set",
          "num_non_zero_gold": 2,
          "num_is_covered": 2
        }
      }
    },
    "intent_counter_metrics": {
      "1": {
        "accuracy": 1.0,
        "precision": 1.0,
        "recall": 1.0,
        "f1": 1.0,
        "confusion_matrix": {
          "true_positive": 2,
          "false_positive": 0,
          "true_negative": 0,
          "false_negative": 0,
          "mode": "counter",
          "num_non_zero_gold": 2,
          "num_is_covered": 2
        }
      }
    },
    "intent_list_metrics": {
      "1": {
        "accuracy": 1.0,
        "precision": 1.0,
        "recall": 1.0,
        "f1": 1.0,
        "confusion_matrix": {
          "true_positive": 2,
          "false_positive": 0,
          "true_negative": 0,
          "false_negative": 0,
          "mode": "list",
          "num_non_zero_gold": 2,
          "num_is_covered": 2
        }
      }
    },
    "slot_set_metrics": {
      "2": {
        "accuracy": 0.3333333333333333,
        "precision": 0.5,
        "recall": 0.5,
        "f1": 0.5,
        "confusion_matrix": {
          "true_positive": 1,
          "false_positive": 1,
          "true_negative": 0,
          "false_negative": 1,
          "mode": "set",
          "num_non_zero_gold": 1,
          "num_is_covered": 0
        }
      },
      "1": {
        "accuracy": 1.0,
        "precision": 1.0,
        "recall": 1.0,
        "f1": 1.0,
        "confusion_matrix": {
          "true_positive": 1,
          "false_positive": 0,
          "true_negative": 0,
          "false_negative": 0,
          "mode": "set",
          "num_non_zero_gold": 1,
          "num_is_covered": 1
        }
      }
    }
  },
  "num_examples": 2,
  "percentage_times_full_score": 0.0,
  "num_errors_parsing_pred_intent": 0,
  "num_errors_parsing_gold_intent": 0,
  "num_errors_parsing_pred_slot": 0,
  "num_errors_parsing_gold_slot": 0,
  "num_pred_examples_w_parsing_errors": 0,
  "num_gold_examples_w_parsing_errors": 0,
  "error_messages": [],
  "parsing_error_messages": [],
  "model_temperature": 0,
  "model_max_tokens": 1500,
  "evaluation_source": [
    {
      "sample_id": 0,
      "input": "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n\nYou are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one function/tool call to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out. You should only return the function call in tools call sections.\n\nIf you decide to invoke any of the function, you MUST put it in the format of [{\"name\": \"func_name1\", \"arguments\": {\"argument1\": \"value1\", \"argument2\": \"value2\"}, \"label\": \"$var_1\"}]\n\nYou SHOULD NOT include any other text in the response.\n\nHere is a list of functions in JSON format that you can invoke.\n\n[{\"name\": \"get_property_names_v1_cosql_real_estate_properties_properties_get\", \"description\": \"Get property names based on property type and room count\", \"arguments\": {\"property_type_code\": {\"type\": \"string\", \"description\": \"Property type code\", \"title\": \"Property Type Code\"}, \"room_count\": {\"type\": \"integer\", \"description\": \"Room count\", \"title\": \"Room Count\"}}}, {\"name\": \"get_property_names_with_room_count_v1_cosql_real_estate_properties_properties_with_room_count_get\", \"description\": \"Get property names and room counts based on property type and room count\", \"arguments\": {\"property_type_code\": {\"type\": \"string\", \"description\": \"Property type code\", \"title\": \"Property Type Code\"}, \"room_count\": {\"type\": \"integer\", \"description\": \"Room count\", \"title\": \"Room Count\"}}}, {\"name\": \"get_avg_selling_price_v1_cosql_real_estate_properties_avg_selling_price_get\", \"description\": \"Get average agreed selling price based on property type and room count\", \"arguments\": {\"property_type_code\": {\"type\": \"string\", \"description\": \"Property type code\", \"title\": \"Property Type Code\"}, \"room_count\": {\"type\": \"integer\", \"description\": \"Room count\", \"title\": \"Room Count\"}}}, {\"name\": \"get_feature_type_name_v1_cosql_real_estate_properties_feature_type_name_get\", \"description\": \"Get feature type name based on feature name\", \"arguments\": {\"feature_name\": {\"type\": \"string\", \"description\": \"Feature name\", \"title\": \"Feature Name\"}}}, {\"name\": \"get_feature_description_v1_cosql_real_estate_properties_feature_description_get\", \"description\": \"Get feature description based on feature name\", \"arguments\": {\"feature_name\": {\"type\": \"string\", \"description\": \"Feature name\", \"title\": \"Feature Name\"}}}, {\"name\": \"get_feature_count_v1_cosql_real_estate_properties_feature_count_get\", \"description\": \"Get count of distinct feature IDs\", \"arguments\": {}}, {\"name\": \"get_feature_type_code_v1_cosql_real_estate_properties_feature_type_code_get\", \"description\": \"Get feature type code based on feature name\", \"arguments\": {\"feature_name\": {\"type\": \"string\", \"description\": \"Feature name\", \"title\": \"Feature Name\"}}}]\n<|eot_id|><|start_header_id|>user<|end_header_id|>\n\nWhat are the names of properties that are either houses or apartments with more than 1 room?<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n'",
      "output": "[{\"name\": \"get_property_names_v1_cosql_real_estate_properties_properties_get\", \"arguments\": {\"property_type_code\": \"House\", \"room_count\": \"1\"}}]",
      "gold_answer": [
        [
          "longacre"
        ],
        [
          "parc coliseum"
        ],
        [
          "parc east"
        ],
        [
          "park"
        ],
        [
          "renoir"
        ],
        [
          "ten tower"
        ],
        [
          "the cole"
        ],
        [
          "vogue"
        ]
      ],
      "generated_text": "{\"name\": \"get_property_names_v1_cosql_real_estate_properties_properties_get\", \"arguments\": {\"property_type_code\": \"house\", \"room_count\": \"1\"}, \"label\": \"$var_1\"}' \n'{\"name\": \"get_property_names_v1_cosql_real_estate_properties_properties_get\", \"arguments\": {\"property_type_code\": \"apartment\", \"room_count\": \"1\"}, \"label\": \"$var_2\"}'",
      "llm_model_id": "meta-llama/Llama-3.1-8B-Instruct",
      "source_file_path": "/u/jungkoo2654/api_integrated_llm_experiment/source/evaluation/router/cosql/rest/real_estate_properties_nestful_format_cosql.json",
      "dataset_name": "real_estate_properties_nestful_format_cosql",
      "temperature": 0.0,
      "max_tokens": 1500,
      "is_agent": false,
      "predicted_function_calls": [],
      "gold_function_calls": [],
      "num_preciedtion_parsing_errors": null
    },
    {
      "sample_id": 1,
      "input": "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n\nYou are an expert in composing functions. You are given a question and a set of possible functions.\nBased on the question, you will need to make one function/tool call to achieve the purpose.\nIf none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out. You should only return the function call in tools call sections.\n\nIf you decide to invoke any of the function, you MUST put it in the format of [{\"name\": \"func_name1\", \"arguments\": {\"argument1\": \"value1\", \"argument2\": \"value2\"}, \"label\": \"$var_1\"}]\n\nYou SHOULD NOT include any other text in the response.\n\nHere is a list of functions in JSON format that you can invoke.\n\n[{\"name\": \"get_property_names_v1_cosql_real_estate_properties_properties_get\", \"description\": \"Get property names based on property type and room count\", \"arguments\": {\"property_type_code\": {\"type\": \"string\", \"description\": \"Property type code\", \"title\": \"Property Type Code\"}, \"room_count\": {\"type\": \"integer\", \"description\": \"Room count\", \"title\": \"Room Count\"}}}, {\"name\": \"get_property_names_with_room_count_v1_cosql_real_estate_properties_properties_with_room_count_get\", \"description\": \"Get property names and room counts based on property type and room count\", \"arguments\": {\"property_type_code\": {\"type\": \"string\", \"description\": \"Property type code\", \"title\": \"Property Type Code\"}, \"room_count\": {\"type\": \"integer\", \"description\": \"Room count\", \"title\": \"Room Count\"}}}, {\"name\": \"get_avg_selling_price_v1_cosql_real_estate_properties_avg_selling_price_get\", \"description\": \"Get average agreed selling price based on property type and room count\", \"arguments\": {\"property_type_code\": {\"type\": \"string\", \"description\": \"Property type code\", \"title\": \"Property Type Code\"}, \"room_count\": {\"type\": \"integer\", \"description\": \"Room count\", \"title\": \"Room Count\"}}}, {\"name\": \"get_feature_type_name_v1_cosql_real_estate_properties_feature_type_name_get\", \"description\": \"Get feature type name based on feature name\", \"arguments\": {\"feature_name\": {\"type\": \"string\", \"description\": \"Feature name\", \"title\": \"Feature Name\"}}}, {\"name\": \"get_feature_description_v1_cosql_real_estate_properties_feature_description_get\", \"description\": \"Get feature description based on feature name\", \"arguments\": {\"feature_name\": {\"type\": \"string\", \"description\": \"Feature name\", \"title\": \"Feature Name\"}}}, {\"name\": \"get_feature_count_v1_cosql_real_estate_properties_feature_count_get\", \"description\": \"Get count of distinct feature IDs\", \"arguments\": {}}, {\"name\": \"get_feature_type_code_v1_cosql_real_estate_properties_feature_type_code_get\", \"description\": \"Get feature type code based on feature name\", \"arguments\": {\"feature_name\": {\"type\": \"string\", \"description\": \"Feature name\", \"title\": \"Feature Name\"}}}]\n<|eot_id|><|start_header_id|>user<|end_header_id|>\n\nWhat is the feature type name of feature AirCon?<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n'",
      "output": "[{\"name\": \"get_feature_type_name_v1_cosql_real_estate_properties_feature_type_name_get\", \"arguments\": {\"feature_name\": \"AirCon\"}}]",
      "gold_answer": [
        [
          "Amenity, eg Pool."
        ]
      ],
      "generated_text": "{\"name\": \"get_feature_type_name_v1_cosql_real_estate_properties_feature_type_name_get\", \"arguments\": {\"feature_name\": \"AirCon\"}, \"label\": \"$var_1\"}",
      "llm_model_id": "meta-llama/Llama-3.1-8B-Instruct",
      "source_file_path": "/u/jungkoo2654/api_integrated_llm_experiment/source/evaluation/router/cosql/rest/real_estate_properties_nestful_format_cosql.json",
      "dataset_name": "real_estate_properties_nestful_format_cosql",
      "temperature": 0.0,
      "max_tokens": 1500,
      "is_agent": false,
      "predicted_function_calls": [],
      "gold_function_calls": [],
      "num_preciedtion_parsing_errors": null
    }
  ],
  "gold_output_intent": [
    [
      "get_property_names_v1_cosql_real_estate_properties_properties_get"
    ],
    [
      "get_feature_type_name_v1_cosql_real_estate_properties_feature_type_name_get"
    ]
  ],
  "pred_output_intent": [
    [
      "get_property_names_v1_cosql_real_estate_properties_properties_get"
    ],
    [
      "get_feature_type_name_v1_cosql_real_estate_properties_feature_type_name_get"
    ]
  ],
  "gold_output_slot": [
    [
      "property_type_code = House",
      "room_count = 1"
    ],
    [
      "feature_name = AirCon"
    ]
  ],
  "pred_output_slot": [
    [
      "property_type_code = house",
      "room_count = 1"
    ],
    [
      "feature_name = AirCon"
    ]
  ],
  "win_rate": null,
  "num_sequences_processed_win_rate": null,
  "error_messages_win_rate": [],
  "num_failed_function_execution_list": []
}