{
  "confusion_metrix_matrics_micro_problem_level": {
    "intent_set_metrics_list": [
      {
        "accuracy": 0.0,
        "precision": null,
        "recall": 0.0,
        "f1": null,
        "confusion_matrix": {
          "true_positive": 0,
          "false_positive": 0,
          "true_negative": 0,
          "false_negative": 1,
          "mode": "set",
          "num_non_zero_gold": 1,
          "num_is_covered": 0
        }
      }
    ],
    "intent_counter_metrics_list": [
      {
        "accuracy": 0.0,
        "precision": null,
        "recall": 0.0,
        "f1": null,
        "confusion_matrix": {
          "true_positive": 0,
          "false_positive": 0,
          "true_negative": 0,
          "false_negative": 1,
          "mode": "counter",
          "num_non_zero_gold": 1,
          "num_is_covered": 0
        }
      }
    ],
    "intent_list_metrics_list": [
      {
        "accuracy": 0.0,
        "precision": null,
        "recall": 0.0,
        "f1": null,
        "confusion_matrix": {
          "true_positive": 0,
          "false_positive": 0,
          "true_negative": 0,
          "false_negative": 1,
          "mode": "list",
          "num_non_zero_gold": 1,
          "num_is_covered": 0
        }
      }
    ],
    "slot_set_metrics_list": []
  },
  "confusion_metrix_matrics_micro_model_by_output_length_problem_level": {
    "intent_set_metrics_list": {
      "1": [
        {
          "accuracy": 0.0,
          "precision": null,
          "recall": 0.0,
          "f1": null,
          "confusion_matrix": {
            "true_positive": 0,
            "false_positive": 0,
            "true_negative": 0,
            "false_negative": 1,
            "mode": "set",
            "num_non_zero_gold": 1,
            "num_is_covered": 0
          }
        }
      ]
    },
    "intent_counter_metrics_list": {
      "1": [
        {
          "accuracy": 0.0,
          "precision": null,
          "recall": 0.0,
          "f1": null,
          "confusion_matrix": {
            "true_positive": 0,
            "false_positive": 0,
            "true_negative": 0,
            "false_negative": 1,
            "mode": "counter",
            "num_non_zero_gold": 1,
            "num_is_covered": 0
          }
        }
      ]
    },
    "intent_list_metrics_list": {
      "1": [
        {
          "accuracy": 0.0,
          "precision": null,
          "recall": 0.0,
          "f1": null,
          "confusion_matrix": {
            "true_positive": 0,
            "false_positive": 0,
            "true_negative": 0,
            "false_negative": 1,
            "mode": "list",
            "num_non_zero_gold": 1,
            "num_is_covered": 0
          }
        }
      ]
    },
    "slot_set_metrics_list": {}
  },
  "confusion_metrix_matrics_micro": {
    "intent_set_metrics": {
      "accuracy": 0.0,
      "precision": null,
      "recall": 0.0,
      "f1": null,
      "confusion_matrix": {
        "true_positive": 0,
        "false_positive": 0,
        "true_negative": 0,
        "false_negative": 1,
        "mode": "set",
        "num_non_zero_gold": 1,
        "num_is_covered": 0
      }
    },
    "intent_counter_metrics": {
      "accuracy": 0.0,
      "precision": null,
      "recall": 0.0,
      "f1": null,
      "confusion_matrix": {
        "true_positive": 0,
        "false_positive": 0,
        "true_negative": 0,
        "false_negative": 1,
        "mode": "counter",
        "num_non_zero_gold": 1,
        "num_is_covered": 0
      }
    },
    "intent_list_metrics": {
      "accuracy": 0.0,
      "precision": null,
      "recall": 0.0,
      "f1": null,
      "confusion_matrix": {
        "true_positive": 0,
        "false_positive": 0,
        "true_negative": 0,
        "false_negative": 1,
        "mode": "list",
        "num_non_zero_gold": 1,
        "num_is_covered": 0
      }
    },
    "slot_set_metrics": {
      "accuracy": null,
      "precision": null,
      "recall": null,
      "f1": null,
      "confusion_matrix": null
    }
  },
  "confusion_metrix_matrics_micro_model_by_output_length": {
    "intent_set_metrics": {
      "1": {
        "accuracy": 0.0,
        "precision": null,
        "recall": 0.0,
        "f1": null,
        "confusion_matrix": {
          "true_positive": 0,
          "false_positive": 0,
          "true_negative": 0,
          "false_negative": 1,
          "mode": "set",
          "num_non_zero_gold": 1,
          "num_is_covered": 0
        }
      }
    },
    "intent_counter_metrics": {
      "1": {
        "accuracy": 0.0,
        "precision": null,
        "recall": 0.0,
        "f1": null,
        "confusion_matrix": {
          "true_positive": 0,
          "false_positive": 0,
          "true_negative": 0,
          "false_negative": 1,
          "mode": "counter",
          "num_non_zero_gold": 1,
          "num_is_covered": 0
        }
      }
    },
    "intent_list_metrics": {
      "1": {
        "accuracy": 0.0,
        "precision": null,
        "recall": 0.0,
        "f1": null,
        "confusion_matrix": {
          "true_positive": 0,
          "false_positive": 0,
          "true_negative": 0,
          "false_negative": 1,
          "mode": "list",
          "num_non_zero_gold": 1,
          "num_is_covered": 0
        }
      }
    },
    "slot_set_metrics": {}
  },
  "num_examples": 1,
  "percentage_times_full_score": 0.0,
  "num_errors_parsing_pred_intent": 1,
  "num_errors_parsing_gold_intent": 0,
  "num_errors_parsing_pred_slot": 0,
  "num_errors_parsing_gold_slot": 0,
  "num_pred_examples_w_parsing_errors": 1,
  "num_gold_examples_w_parsing_errors": 0,
  "error_messages": [],
  "parsing_error_messages": [],
  "model_temperature": 0,
  "model_max_tokens": 1500,
  "evaluation_source": [
    {
      "sample_id": 2,
      "input": "[{\"role\": \"system\", \"content\": \"You are a helpful assistant with access to the following function calls. Your task is to produce a sequence of function calls necessary to generate response to the user utterance. \\n\\n Relevant data is available in the file starting_table_var. \\n\\n Here are some examples: \\n#Example-1\\nInput: Among the movies directed by Wolfgang Reitherman, which one of them was the most popular?\\nOutput: [{\\\"name\\\": \\\"select_data_equal_to\\\", \\\"arguments\\\": {\\\"data_source\\\": \\\"$starting_table_var$\\\", \\\"key_name\\\": \\\"director_director\\\", \\\"value\\\": \\\"Wolfgang Reitherman\\\"}, \\\"label\\\": \\\"FILTERED_DF\\\"}, {\\\"name\\\": \\\"sort_data_descending\\\", \\\"arguments\\\": {\\\"data_source\\\": \\\"$FILTERED_DF$\\\", \\\"key_name\\\": \\\"movies_total_gross_total_gross\\\"}, \\\"label\\\": \\\"SORTED_DF\\\"}, {\\\"name\\\": \\\"get_movies_total_gross_movie_titles\\\", \\\"arguments\\\": {\\\"data_source\\\": \\\"$SORTED_DF$\\\"}, \\\"label\\\": \\\"SELECT_COL_0\\\"}, {\\\"name\\\": \\\"truncate\\\", \\\"arguments\\\": {\\\"truncate_array\\\": \\\"$SELECT_COL_0$\\\", \\\"n\\\": 1}, \\\"label\\\": \\\"LIMIT\\\"}]\\n\\n#Example-2\\nInput: How many PG adventure movies did Ron Clements direct?\\nOutput: [{\\\"name\\\": \\\"select_data_equal_to\\\", \\\"arguments\\\": {\\\"data_source\\\": \\\"$starting_table_var$\\\", \\\"key_name\\\": \\\"director_director\\\", \\\"value\\\": \\\"Ron Clements\\\"}, \\\"label\\\": \\\"FILTERED_DF\\\"}, {\\\"name\\\": \\\"select_data_equal_to\\\", \\\"arguments\\\": {\\\"data_source\\\": \\\"$FILTERED_DF$\\\", \\\"key_name\\\": \\\"movies_total_gross_MPAA_rating\\\", \\\"value\\\": \\\"PG\\\"}, \\\"label\\\": \\\"FILTERED_DF\\\"}, {\\\"name\\\": \\\"select_data_equal_to\\\", \\\"arguments\\\": {\\\"data_source\\\": \\\"$FILTERED_DF$\\\", \\\"key_name\\\": \\\"movies_total_gross_genre\\\", \\\"value\\\": \\\"Adventure\\\"}, \\\"label\\\": \\\"FILTERED_DF\\\"}, {\\\"name\\\": \\\"compute_data_count\\\", \\\"arguments\\\": {\\\"data_source\\\": \\\"$FILTERED_DF$\\\", \\\"key_name\\\": \\\"\\\", \\\"distinct\\\": false}, \\\"label\\\": \\\"COUNT\\\"}]\\n\\n#Example-3\\nInput: List the movie titles directed by Jack Kinney.\\nOutput: [{\\\"name\\\": \\\"select_data_equal_to\\\", \\\"arguments\\\": {\\\"data_source\\\": \\\"$starting_table_var$\\\", \\\"key_name\\\": \\\"director\\\", \\\"value\\\": \\\"Jack Kinney\\\"}, \\\"label\\\": \\\"FILTERED_DF\\\"}, {\\\"name\\\": \\\"get_names\\\", \\\"arguments\\\": {\\\"data_source\\\": \\\"$FILTERED_DF$\\\"}, \\\"label\\\": \\\"SELECT_COL_0\\\"}]\\n\\n\"}, {\"role\": \"user\", \"content\": \"find the minimum and maximum number of products of all stores.\"}]",
      "output": [
        {
          "name": "compute_data_min",
          "arguments": {
            "data_source": "$starting_table_var$",
            "key_name": "number_products",
            "distinct": false
          },
          "label": "MIN"
        },
        {
          "name": "compute_data_max",
          "arguments": {
            "data_source": "$starting_table_var$",
            "key_name": "number_products",
            "distinct": false
          },
          "label": "MAX"
        }
      ],
      "gold_answer": [
        1600,
        15000
      ],
      "messages": null,
      "tools": null,
      "generated_text": "",
      "tool_calls": [
        {
          "function": {
            "arguments": "{}",
            "name": "get_number_productss"
          },
          "id": "call_B",
          "type": "function"
        },
        {
          "function": {
            "arguments": "{}",
            "name": "get_number_productss"
          },
          "id": "call_X",
          "type": "function"
        }
      ],
      "llm_model_id": "gpt-4o",
      "source_file_path": "/Users/jungkookang/Documents/projects/api_integrated_llm_experiment/tests/data/source/evaluation_trimmed/sequencing_sparc_employee_hire_evaluation.json",
      "dataset_name": "employee_hire_evaluation",
      "temperature": 0.0,
      "max_tokens": 1500,
      "is_agent": false,
      "predicted_function_calls": [],
      "gold_function_calls": [],
      "num_preciedtion_parsing_errors": null
    }
  ],
  "gold_output_intent": [
    [
      "compute_data_min"
    ]
  ],
  "pred_output_intent": [
    []
  ],
  "gold_output_slot": [],
  "pred_output_slot": [],
  "intent_pair_models": [
    {
      "gold": [
        "compute_data_min"
      ],
      "predicted": []
    }
  ],
  "slot_pair_models": [],
  "win_rate": null,
  "num_sequences_processed_win_rate": null,
  "error_messages_win_rate": [],
  "num_failed_function_execution_list": [],
  "win_rate_result_model": {
    "win_rate_result": []
  },
  "parsed_predictions": [
    []
  ],
  "parsed_gold_answer": [
    [
      {
        "name": "compute_data_min",
        "arguments": {
          "data_source": "$starting_table_var$",
          "key_name": "number_products",
          "distinct": false
        }
      }
    ]
  ]
}