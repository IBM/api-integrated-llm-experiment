{
    "mathqa": [
        {
            "sample_id": "ca3a8419-23fb-4e71-a0ba-cc799ad73dc2",
            "dataset_name": "mathqa",
            "input": "In objective test a correct ans score 4 marks and on a wrong ans 2 marks are ---. a student score 480 marks from 150 question. how many ans were correct?",
            "output": [
                {
                    "name": "multiply",
                    "label": "$var_1",
                    "arguments": {
                        "arg_0": 150,
                        "arg_1": 2
                    }
                },
                {
                    "name": "add",
                    "label": "$var_2",
                    "arguments": {
                        "arg_0": 480,
                        "arg_1": "$var_1.result$"
                    }
                },
                {
                    "name": "add",
                    "label": "$var_3",
                    "arguments": {
                        "arg_0": 4,
                        "arg_1": 2
                    }
                },
                {
                    "name": "divide",
                    "label": "$var_4",
                    "arguments": {
                        "arg_0": "$var_2.result$",
                        "arg_1": "$var_3.result$"
                    }
                }
            ],
            "tools": [
                {
                    "name": "min_number",
                    "description": "Find the minimum value among the given numbers",
                    "parameters": {
                        "arg_0": {
                            "description": "A list of numbers",
                            "type": "list of float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "Minimum value",
                            "type": "float"
                        }
                    }
                },
                {
                    "name": "speed",
                    "description": "Calculate speed given distance and time.",
                    "parameters": {
                        "arg_0": {
                            "description": "distance",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "time",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "the speed",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "add",
                    "description": "adds two numbers",
                    "parameters": {
                        "arg_0": {
                            "description": "The first number",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "The second number",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "The addition result",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "multiply",
                    "description": "Multiplies two numbers",
                    "parameters": {
                        "arg_0": {
                            "description": "The first number",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "The second number",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "The multiplication result",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "remainder",
                    "description": "Calculate the remainder of a divided by b",
                    "parameters": {
                        "arg_0": {
                            "description": "first number",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "second number",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "the remainder",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "lcm",
                    "description": "Calculate the least common multiple of two numbers",
                    "parameters": {
                        "arg_0": {
                            "description": "first number",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "second number",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "the least common multiple",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "volume_cylinder",
                    "description": "Calculate the volume of a cylinder",
                    "parameters": {
                        "arg_0": {
                            "description": "Radius of the base of the cylinder",
                            "type": "float"
                        },
                        "arg_1": {
                            "description": "Height of the cylinder",
                            "type": "float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "Volume of the cylinder",
                            "type": "float"
                        }
                    }
                },
                {
                    "name": "divide",
                    "description": "divides two numbers",
                    "parameters": {
                        "arg_0": {
                            "description": "The first number",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "The second number",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "The division result",
                            "type": "int or float"
                        }
                    }
                }
            ],
            "gold_answer": 130.0
        },
        {
            "sample_id": "08f01cce-bbc3-49c0-9e2a-b437de5444aa",
            "dataset_name": "mathqa",
            "input": "A student traveled 10 percent of the distance of the trip alone, continued another 30 miles with a friend, and then finished the last half of the trip alone. How many miles long was the trip?",
            "output": [
                {
                    "name": "inverse",
                    "label": "$var_1",
                    "arguments": {
                        "arg_0": 10
                    }
                },
                {
                    "name": "subtract",
                    "label": "$var_2",
                    "arguments": {
                        "arg_0": 1,
                        "arg_1": "$var_1.result$"
                    }
                },
                {
                    "name": "divide",
                    "label": "$var_3",
                    "arguments": {
                        "arg_0": 1,
                        "arg_1": 2
                    }
                },
                {
                    "name": "subtract",
                    "label": "$var_4",
                    "arguments": {
                        "arg_0": "$var_2.result$",
                        "arg_1": "$var_3.result$"
                    }
                },
                {
                    "name": "divide",
                    "label": "$var_5",
                    "arguments": {
                        "arg_0": 30,
                        "arg_1": "$var_4.result$"
                    }
                }
            ],
            "tools": [
                {
                    "name": "inverse",
                    "description": "Return the inverse (reciprocal) of a number",
                    "parameters": {
                        "arg_0": {
                            "description": "The number to inverse",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "The inverse result",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "multiply",
                    "description": "Multiplies two numbers",
                    "parameters": {
                        "arg_0": {
                            "description": "The first number",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "The second number",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "The multiplication result",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "surface_sphere",
                    "description": "Calculate the surface area of a sphere",
                    "parameters": {
                        "arg_0": {
                            "description": "Radius of the sphere",
                            "type": "float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "Surface area of the sphere",
                            "type": "float"
                        }
                    }
                },
                {
                    "name": "square_edge_by_perimeter",
                    "description": "Calculate the edge length of a square given its perimeter",
                    "parameters": {
                        "arg_0": {
                            "description": "Perimeter of the square",
                            "type": "float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "Edge length of the square",
                            "type": "float"
                        }
                    }
                },
                {
                    "name": "divide",
                    "description": "divides two numbers",
                    "parameters": {
                        "arg_0": {
                            "description": "The first number",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "The second number",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "The division result",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "speed",
                    "description": "Calculate speed given distance and time.",
                    "parameters": {
                        "arg_0": {
                            "description": "distance",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "time",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "the speed",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "subtract",
                    "description": "subtract two numbers",
                    "parameters": {
                        "arg_0": {
                            "description": "The first number",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "The second number",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "The subtraction result",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "square_edge_by_area",
                    "description": "Calculate the edge length of a square given its area",
                    "parameters": {
                        "arg_0": {
                            "description": "Area of the square",
                            "type": "float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "Edge length of the square",
                            "type": "float"
                        }
                    }
                }
            ],
            "gold_answer": 75.0
        },
        {
            "sample_id": "a40775f2-4e57-4fc9-9ba0-07590d880471",
            "dataset_name": "mathqa",
            "input": "Of the diplomats attending a summit conference, 30 speak French, 32 do not speak Russian, and 20% of the diplomats speak neither French nor Russian. If 10% of the diplomats speak both languages, then how many diplomats attended the conference?",
            "output": [
                {
                    "name": "subtract",
                    "label": "$var_1",
                    "arguments": {
                        "arg_0": 32,
                        "arg_1": 30
                    }
                },
                {
                    "name": "divide",
                    "label": "$var_2",
                    "arguments": {
                        "arg_0": 20,
                        "arg_1": 100
                    }
                },
                {
                    "name": "divide",
                    "label": "$var_3",
                    "arguments": {
                        "arg_0": 10,
                        "arg_1": 100
                    }
                },
                {
                    "name": "subtract",
                    "label": "$var_4",
                    "arguments": {
                        "arg_0": "$var_2.result$",
                        "arg_1": "$var_3.result$"
                    }
                },
                {
                    "name": "divide",
                    "label": "$var_5",
                    "arguments": {
                        "arg_0": "$var_1.result$",
                        "arg_1": "$var_4.result$"
                    }
                }
            ],
            "tools": [
                {
                    "name": "subtract",
                    "description": "subtract two numbers",
                    "parameters": {
                        "arg_0": {
                            "description": "The first number",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "The second number",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "The subtraction result",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "lcm",
                    "description": "Calculate the least common multiple of two numbers",
                    "parameters": {
                        "arg_0": {
                            "description": "first number",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "second number",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "the least common multiple",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "power",
                    "description": "Raise a number to a power",
                    "parameters": {
                        "arg_0": {
                            "description": "The base number",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "The exponent number",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "the power result",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "diagonal",
                    "description": "Calculate the length of the diagonal of a rectangle",
                    "parameters": {
                        "arg_0": {
                            "description": "Length of the rectangle",
                            "type": "float"
                        },
                        "arg_1": {
                            "description": "Width of the rectangle",
                            "type": "float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "Length of the diagonal",
                            "type": "float"
                        }
                    }
                },
                {
                    "name": "remainder",
                    "description": "Calculate the remainder of a divided by b",
                    "parameters": {
                        "arg_0": {
                            "description": "first number",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "second number",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "the remainder",
                            "type": "int or float"
                        }
                    }
                },
                {
                    "name": "sqrt",
                    "description": "Calculate the square root of a non-negative number.",
                    "parameters": {
                        "arg_0": {
                            "description": "The input number",
                            "type": "int"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "the square root of the provided number",
                            "type": "int"
                        }
                    }
                },
                {
                    "name": "divide",
                    "description": "divides two numbers",
                    "parameters": {
                        "arg_0": {
                            "description": "The first number",
                            "type": "int or float"
                        },
                        "arg_1": {
                            "description": "The second number",
                            "type": "int or float"
                        }
                    },
                    "output_parameter": {
                        "result": {
                            "description": "The division result",
                            "type": "int or float"
                        }
                    }
                }
            ],
            "gold_answer": 20.0
        }
    ],
    "stack": [
        {
            "sample_id": "e7bc539e-3ff0-4101-b2bb-5b46c3861de8",
            "dataset_name": "dgt_output_api_stack_nested_v4",
            "input": "I have a square matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]]. I want to traverse the diagonal elements and calculate the saliency ratio for each element.",
            "output": [
                {
                    "name": "traverse_diagonal",
                    "arguments": {
                        "matrix": [
                            [
                                1,
                                2,
                                3
                            ],
                            [
                                4,
                                5,
                                6
                            ],
                            [
                                7,
                                8,
                                9
                            ]
                        ]
                    },
                    "label": "$var1"
                },
                {
                    "name": "ratio_saliency",
                    "arguments": {
                        "time_series": "$var1.output_0$"
                    },
                    "label": "$var2"
                }
            ],
            "tools": [
                {
                    "description": "Converts some columns of a table to a different type.",
                    "name": "convert_table",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "The table with the specified columns converted to the target data types.",
                                "type": "array"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "conversions": {
                                "description": "A list of tuples, where each tuple contains the name of a column to be converted and the target data type.",
                                "items": {
                                    "prefixItems": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "object"
                                        }
                                    ],
                                    "type": "array"
                                },
                                "type": "array"
                            },
                            "table": {
                                "description": "A list of dictionaries representing the table.",
                                "items": {
                                    "additionalProperties": {
                                        "type": [
                                            "boolean",
                                            "integer",
                                            "number",
                                            "string"
                                        ]
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "table",
                            "conversions"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Checks if a linked list has a loop.",
                    "name": "has_loop",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "A boolean indicating whether the linked list contains a loop.",
                                "type": "boolean"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "head": {
                                "description": "The head node of the linked list.",
                                "nullable": true,
                                "type": "object"
                            }
                        },
                        "required": [
                            "head"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Checks if a given value is not a string or bytes object.",
                    "name": "is_not_str_or_bytes",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "True if the value is not a string or bytes object, False otherwise.",
                                "type": "boolean"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "value": {
                                "description": "The value to check."
                            }
                        },
                        "required": [
                            "value"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Writes filtered data from a dictionary based on a filter pattern.",
                    "name": "write_filtered_data",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "",
                                "type": "object"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "data": {
                                "additionalProperties": {
                                    "type": "object"
                                },
                                "description": "The dictionary of data to filter.",
                                "type": "object"
                            },
                            "filter_pattern": {
                                "description": "The filter pattern to match against the keys of the data.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "data",
                            "filter_pattern"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Calculates the saliency ratio for a given time series.",
                    "name": "ratio_saliency",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "A list of floats representing the saliency ratios.",
                                "type": "array"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "time_series": {
                                "description": "A list of integers representing the time series.",
                                "items": {
                                    "type": "integer"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "time_series"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.",
                    "name": "traverse_diagonal",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "A list of the diagonal elements.",
                                "type": "array"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "matrix": {
                                "description": "A square matrix represented as a list of lists.",
                                "items": {
                                    "items": {
                                        "type": "integer"
                                    },
                                    "type": "array"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "matrix"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Computes the raw moment of an image with a given order.",
                    "name": "raw_moment",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "The computed raw moment.",
                                "type": "number"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "img": {
                                "description": "The input image.",
                                "type": "object"
                            },
                            "p": {
                                "description": "The horizontal order.",
                                "type": "integer"
                            },
                            "q": {
                                "description": "The vertical order.",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "img",
                            "p",
                            "q"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Validates whether the parentheses in a given string are nested correctly.",
                    "name": "validate_parens",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "A boolean value indicating whether the parentheses are nested correctly.",
                                "type": "boolean"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "s": {
                                "description": "A string containing only parentheses.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "s"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Returns the smallest and largest numbers in a list of numbers.\nIf the list contains a non-numeric value, returns None.\nIf the list is empty, returns (None, None).",
                    "name": "get_min_and_max",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "",
                                "type": "object"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "nums": {
                                "description": "A list of numbers (integers or floats).",
                                "items": {
                                    "type": [
                                        "integer",
                                        "number"
                                    ]
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "nums"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Calculates the sparsity of a PyTorch tensor as the ratio of zero elements to total elements.",
                    "name": "calculate_sparsity",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "The sparsity of the tensor.",
                                "type": "number"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "tensor": {
                                "description": "The PyTorch tensor to calculate the sparsity of.",
                                "type": "object"
                            }
                        },
                        "required": [
                            "tensor"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Unpickles a file and returns the unpickled object.",
                    "name": "unpickle",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "",
                                "type": "object"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "The path to the file to be unpickled.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    }
                }
            ],
            "gold_answer": [
                0.06666666666666667,
                0.3333333333333333,
                0.6
            ]
        },
        {
            "sample_id": "738365f4-8f90-41b6-8b1c-5da4a8655f25",
            "dataset_name": "dgt_output_api_stack_nested_v5",
            "input": "Given a string \"Hello world! How are you?\", extract non-whitespace substrings and count the words from the resulting substrings.",
            "output": [
                {
                    "name": "non_whitespace_substrings",
                    "arguments": {
                        "input_str": "Hello world! How are you?"
                    },
                    "label": "$var1"
                },
                {
                    "name": "count_words_from_sentences",
                    "arguments": {
                        "sentences": "$var1.output_0$"
                    },
                    "label": "$var2"
                }
            ],
            "tools": [
                {
                    "description": "Computes the Spearman's rank correlation coefficient between two arrays.",
                    "name": "compute_spearman_correlation",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "A single float value representing the correlation coefficient.",
                                "type": "number"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "array1": {
                                "description": "A 1-dimensional NumPy array.",
                                "type": "object"
                            },
                            "array2": {
                                "description": "A 1-dimensional NumPy array of equal length to array1.",
                                "type": "object"
                            }
                        },
                        "required": [
                            "array1",
                            "array2"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Calculates the MD5 hash and size of a file.",
                    "name": "md5_and_size",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "A dictionary containing the MD5 hash and size of the file.",
                                "type": "object"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "filename": {
                                "description": "The name of the file to calculate the hash and size for.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "filename"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Calculates the magnitude of the transfer function of a proportional-only controller.",
                    "name": "proportional_controller",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "The magnitude of the transfer function at the given frequency and damping, which is proportional to the controller gain.",
                                "type": "number"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "kp": {
                                "description": "The proportional gain constant.",
                                "type": "number"
                            },
                            "omega": {
                                "description": "The frequency where the controller is evaluated.",
                                "type": "number"
                            },
                            "zeta": {
                                "description": "The damping ratio, a non-negative real number.",
                                "type": "number"
                            }
                        },
                        "required": [
                            "kp",
                            "omega",
                            "zeta"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Removes characters from a string that match a given regular expression pattern.",
                    "name": "remove_characters_by_regex",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "",
                                "type": "string"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "regex": {
                                "description": "The regular expression pattern.",
                                "type": "string"
                            },
                            "string": {
                                "description": "The input string.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "string",
                            "regex"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Returns a list of non-empty substrings that do not contain any whitespace characters.",
                    "name": "non_whitespace_substrings",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "",
                                "type": "array"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "input_str": {
                                "description": "A string containing multiple words separated by whitespace characters.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "input_str"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Counts the words in a list of sentences.",
                    "name": "count_words_from_sentences",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "A dictionary of words and their corresponding counts.",
                                "type": "object"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "sentences": {
                                "description": "A list of sentences.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "sentences"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Reads and modifies a JSON file.",
                    "name": "read_and_modify_json",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "A list of `frame` objects. The `frame` object is a dictionary with keys\n    `id`, `timestamp`, and `data`. The `data` value is a dictionary with keys\n    `x` and `y`. The function modifies the `timestamp` value of each `frame`\n    object by adding 100 to it.",
                                "type": "array"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "json_file": {
                                "description": "The name of the JSON file.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "json_file"
                        ],
                        "type": "object"
                    }
                }
            ],
            "gold_answer": {
                "Hello": 1,
                "world!": 1,
                "How": 1,
                "are": 1,
                "you?": 1
            }
        },
        {
            "sample_id": "7023316a-757d-417a-a8e0-354bee673123",
            "dataset_name": "dgt_output_api_stack_nested_v5",
            "input": "I have a string of numbers \"1.2, 3.4, 5.6\". Parse this string into a list of floats, then compute the degree of the polynomial represented by this list.",
            "output": [
                {
                    "name": "parse_list_of_numbers",
                    "arguments": {
                        "string": "1.2, 3.4, 5.6"
                    },
                    "label": "$var1"
                },
                {
                    "name": "compute_degree",
                    "arguments": {
                        "coefficients": "$var1.output_0$"
                    },
                    "label": "$var2"
                }
            ],
            "tools": [
                {
                    "description": "Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).",
                    "name": "compute_degree",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "",
                                "type": "integer"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "coefficients": {
                                "description": "The coefficients of the polynomial in decreasing order of powers.",
                                "items": {
                                    "type": "number"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "coefficients"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Flips an input image `img` left-to-right.",
                    "name": "fliplr",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "A new array with the image flipped horizontally.",
                                "type": "object"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "img": {
                                "description": "The input image, a Numpy array of shape `(H, W, C)` where `H` is the height, `W` is the width, and `C` is the number of channels.",
                                "type": "object"
                            }
                        },
                        "required": [
                            "img"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Generates all possible pairs of symbols from a given list of symbols, including duplicates.",
                    "name": "generate_symbol_pairs",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "A list of pairs of symbols as tuples.",
                                "type": "array"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "symbols": {
                                "description": "A list of symbols.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "symbols"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Counts the total number of lines in a given file, skipping empty lines and lines that begin with a comment symbol.",
                    "name": "count_lines_of_code",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "The total number of lines in the file.",
                                "type": "integer"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "The path to the file.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Adds equal padding to both sides of a string.",
                    "name": "add_paddings",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "",
                                "type": "string"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "padding_width": {
                                "description": "The width of the padding. Must be a positive integer.",
                                "type": [
                                    "integer",
                                    "number"
                                ]
                            },
                            "text": {
                                "description": "The input string.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "text",
                            "padding_width"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Formats a string with placeholders using a dictionary of values.",
                    "name": "format_with_placeholders",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "A string with the placeholders replaced by the corresponding values in the `value_dict` dictionary.",
                                "type": "string"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "text": {
                                "description": "The string with placeholders.",
                                "type": "string"
                            },
                            "value_dict": {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "description": "A dictionary that maps placeholder names to values.",
                                "type": "object"
                            }
                        },
                        "required": [
                            "text",
                            "value_dict"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Merges a list of XML root elements into a single merged root element.",
                    "name": "merge_xml_elements",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "The merged root element.",
                                "type": "object"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "root_element_list": {
                                "description": "A list of XML root elements to merge.",
                                "items": {
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "root_element_list"
                        ],
                        "type": "object"
                    }
                },
                {
                    "description": "Parses a string representing a list of numbers (separated by commas) into a list of floats.",
                    "name": "parse_list_of_numbers",
                    "output_parameters": {
                        "properties": {
                            "output_0": {
                                "description": "A list of floats.",
                                "type": "array"
                            }
                        }
                    },
                    "parameters": {
                        "properties": {
                            "string": {
                                "description": "The input string.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "string"
                        ],
                        "type": "object"
                    }
                }
            ],
            "gold_answer": 2
        }
    ]
}